 --#region UI Code
 local library = {flags = {},currenttab = nil, destroyed = false,}
 local mouse = game.Players.LocalPlayer:GetMouse()
 
 local theme = {
     main = Color3.fromRGB(15, 15, 15),
     secondary = Color3.fromRGB(25, 25, 25),
     accent = Color3.fromRGB(35, 35, 35),
     accentsecondary = Color3.fromRGB(20, 20, 20),
     textcolor = Color3.fromRGB(225,225,225),
     lightcontrast = Color3.fromRGB(194, 50, 115)
  }
 
 function UnHideContent(path,name)
     for i,v in next, path:GetChildren() do
         if v:IsA"Frame" and v.Name == "Section"..name then
             v.Visible = true
         else
             if v:IsA"Frame" and v.Name ~= "Section"..name then
                 v.Visible = false
             end
         end
     end
 end
 
 local tabchanging = false
 function changetab(info) -- info1 is the holder and info2 is the tab btn
     if tabchanging then return end
     if library.currenttab == nil then
         UnHideContent(info[1],info[2].Name)
         info[2].Icon.ImageColor3 = theme.lightcontrast
         info[2].TextLabel.TextColor3 = theme.lightcontrast
         library.currenttab = {info[1],info[2]}
         return
     end
     tabchanging = true
     library.currenttab[2].Icon.ImageColor3 = theme.textcolor
     library.currenttab[2].TextLabel.TextColor3 = theme.textcolor
     UnHideContent(info[1],info[2].Name)
     info[2].Icon.ImageColor3 = theme.lightcontrast
     info[2].TextLabel.TextColor3 = theme.lightcontrast
     library.currenttab = {info[1],info[2]}
     tabchanging = false
 end
 
 function drag(frame, hold) -- Skidded from Kiriot or Wally ~V3rmillion~
     if not hold then
         hold = frame
     end
     local dragging
     local dragInput
     local dragStart
     local startPos
 
     local function update(input)
         local delta = input.Position - dragStart
         frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
     end

     hold.InputBegan:Connect(function(input)
         if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
             dragging = true
             dragStart = input.Position
             startPos = frame.Position
 
             input.Changed:Connect(function()
                 if input.UserInputState == Enum.UserInputState.End then
                     dragging = false
                 end
             end)
         end
     end)
 
     frame.InputChanged:Connect(function(input)
         if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
             dragInput = input
         end
     end)
 
     game:GetService("UserInputService").InputChanged:Connect(function(input)
         if input == dragInput and dragging then
             update(input)
         end
     end)
 end
 
 function SetParent()
     if game:GetService("RunService"):IsStudio() then
         return game.Players.LocalPlayer:WaitForChild("PlayerGui")
     else
         return game:WaitForChild("CoreGui")
     end
 end
 
 function library:Create(id)
     if SetParent():FindFirstChild("Silent") then
         SetParent():FindFirstChild("Silent"):Destroy()
     end
     local Silent = Instance.new("ScreenGui")
     local Main = Instance.new("Frame")
     local MainC = Instance.new("UICorner")
     local Side = Instance.new("Frame")
     local SideC = Instance.new("UICorner")
     local ImgBar = Instance.new("Frame")
     local Logo = Instance.new("ImageLabel")
     local Logo2 = Instance.new("ImageLabel")
     local TabHolder = Instance.new("ScrollingFrame")
     local TabHolderL = Instance.new("UIListLayout")
     local SideBar = Instance.new("Frame")
     local NotifyHolder = Instance.new("Frame")
     local NotifyHolderLL = Instance.new("UIListLayout")
     local NotifyHolder_2 = Instance.new("UIPadding")
     local Search = Instance.new("TextBox")
     local UICorner = Instance.new("UICorner")
     local SearchP = Instance.new("UIPadding")
     local SIcon = Instance.new("ImageLabel")
     local Holder = Instance.new("ScrollingFrame")
     local HolderL = Instance.new("UIListLayout")
     local HolderP = Instance.new("UIPadding")
 
     Silent.Name = "Silent"
     Silent.Parent = SetParent()
     Silent.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
 
     Main.Name = "Main"
     Main.Parent = Silent
     Main.BackgroundColor3 = theme.main
     Main.BorderSizePixel = 0
     Main.Size = UDim2.new(0, 536, 0, 393)
     Main.ClipsDescendants = false
     Main.AnchorPoint = Vector2.new(0.5,0.5)
     Main.Position = UDim2.new(0.5,0,0.5,0)
 
     MainC.CornerRadius = UDim.new(0, 4)
     MainC.Name = "MainC"
     MainC.Parent = Main
 
     Side.Name = "Side"
     Side.Parent = Main
     Side.BackgroundColor3 = theme.secondary
     Side.BorderSizePixel = 0
     Side.Size = UDim2.new(0, 144, 0, 393)
 
     SideC.CornerRadius = UDim.new(0, 4)
     SideC.Name = "SideC"
     SideC.Parent = Side
 
     ImgBar.Name = "ImgBar"
     ImgBar.Parent = Side
     ImgBar.BackgroundColor3 = theme.main
     ImgBar.BorderSizePixel = 0
     ImgBar.Position = UDim2.new(0, 6, 0, 85)
     ImgBar.Size = UDim2.new(0, 130, 0, 1)
 
     Logo.Name = "Logo"
     Logo.Parent = Side
     Logo.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
     Logo.BackgroundTransparency = 1
     Logo.BorderSizePixel = 0
     Logo.Position = UDim2.new(0, 6, 0, 5)
     Logo.Size = UDim2.new(0, 130, 0, 71)
     Logo.Image = "http://www.roblox.com/asset/?id="..id
     Logo.ImageColor3 = Color3.fromRGB(194, 149, 2)

     Logo2.Name = "Logo2"
     Logo2.Parent = Side
     Logo2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
     Logo2.BackgroundTransparency = 1
     Logo2.BorderSizePixel = 0
     Logo2.Position = UDim2.new(0, 6, 0, 5)
     Logo2.Size = UDim2.new(0, 130, 0, 71)
     if game.Players.LocalPlayer:IsInGroup(7671821) then
     Logo2.Image = "http://www.roblox.com/asset/?id=18694772916"
     else
     Logo2.Image = "http://www.roblox.com/asset/?id=18728285870"
     end
     Logo2.ImageColor3 = Color3.fromRGB(194, 149, 2)
     
     --Logo2.ImageColor3 = Color3.fromRGB(194, 149, 2)

 
     TabHolder.Name = "TabHolder"
     TabHolder.Parent = Side
     TabHolder.Active = true
     TabHolder.BackgroundColor3 = Color3.fromRGB(48, 49, 54)
     TabHolder.BackgroundTransparency = 1.000
     TabHolder.BorderColor3 = Color3.fromRGB(27, 42, 53)
     TabHolder.BorderSizePixel = 0
     TabHolder.Position = UDim2.new(0, 6, 0, 98)
     TabHolder.Size = UDim2.new(0, 129, 0, 288)
     TabHolder.CanvasSize = UDim2.new(0, 0, 0, 0)
     TabHolder.ScrollBarThickness = 0
 
     TabHolderL.Name = "TabHolderL"
     TabHolderL.Parent = TabHolder
     TabHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
     TabHolderL.SortOrder = Enum.SortOrder.LayoutOrder
     TabHolderL.Padding = UDim.new(0, 5)
 
     SideBar.Name = "SideBar"
     SideBar.Parent = Main
     SideBar.BackgroundColor3 = theme.secondary
     SideBar.BorderSizePixel = 0
     SideBar.Position = UDim2.new(0, 139, 0, 0)
     SideBar.Size = UDim2.new(0, 5, 0, 392)
     SideBar.ZIndex = 0
 
     NotifyHolder.Name = "NotifyHolder"
     NotifyHolder.Parent = Main
     NotifyHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
     NotifyHolder.BackgroundTransparency = 1.000
     NotifyHolder.BorderSizePixel = 0
     NotifyHolder.Position = UDim2.new(1, 0, 0, 0)
     NotifyHolder.Size = UDim2.new(0, 6, 0, 393)
 
     NotifyHolderLL.Name = "NotifyHolderLL"
     NotifyHolderLL.Parent = NotifyHolder
     NotifyHolderLL.SortOrder = Enum.SortOrder.LayoutOrder
     NotifyHolderLL.Padding = UDim.new(0, 5)
 
     NotifyHolder_2.Name = "NotifyHolder"
     NotifyHolder_2.Parent = NotifyHolder
     NotifyHolder_2.PaddingLeft = UDim.new(0, 3)
 
     Search.Name = "Search"
     Search.Parent = TabHolder
     Search.BackgroundColor3 = Color3.fromRGB(54, 57, 64)
     Search.Size = UDim2.new(0, 126, 0, 22)
     Search.Font = Enum.Font.GothamMedium
     Search.Text = "Search"
     Search.TextColor3 = Color3.fromRGB(255, 255, 255)
     Search.TextSize = 13.000
     Search.TextXAlignment = Enum.TextXAlignment.Left
 
     UICorner.CornerRadius = UDim.new(0, 4)
     UICorner.Parent = Search
 
     SearchP.Name = "SearchP"
     SearchP.Parent = Search
     SearchP.PaddingLeft = UDim.new(0, 30)
 
     SIcon.Name = "SIcon"
     SIcon.Parent = Search
     SIcon.BackgroundTransparency = 1.000
     SIcon.BorderSizePixel = 0
     SIcon.Position = UDim2.new(-0.272727281, 0, 0.0454545468, 0)
     SIcon.Size = UDim2.new(0, 20, 0, 20)
     SIcon.Image = "http://www.roblox.com/asset/?id=6031154871"
 
     Holder.Name = "Holder"
     Holder.Parent = Main
     Holder.Active = true
     Holder.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
     Holder.BackgroundTransparency = 1.000
     Holder.BorderSizePixel = 0
     Holder.Position = UDim2.new(0, 144, 0, 5)
     Holder.Size = UDim2.new(0, 392, 0, 380)
     Holder.CanvasSize = UDim2.new(0, 0, 0, 0)
     Holder.ScrollBarThickness = 1
     Holder.Visible = true
 
     HolderL.Name = "HolderL"
     HolderL.Parent = Holder
     HolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
     HolderL.SortOrder = Enum.SortOrder.LayoutOrder
     HolderL.Padding = UDim.new(0, 5)
 
     HolderP.Name = "HolderP"
     HolderP.Parent = Holder
     HolderP.PaddingTop = UDim.new(0, 5)
 
     TabHolderL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
         TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolderL.AbsoluteContentSize.Y + 15)
     end)
     
     local search = function(text)
         if text == "" then return end
         for i,v in next, Holder:GetChildren() do
             if v.Name:sub(1,7) == "Section" then
                 for i,v in next, v:GetChildren() do
                     if v:IsA("TextButton") then
                         if v.Text:lower():match(text:lower()) then
                             v.Parent.Visible = true
                             break
                         elseif v.Parent:FindFirstChild("TextLabel") and v.Parent.TextLabel.Text:lower():match(text:lower()) then
                             v.Parent.Visible = true
                             break
                         else
                             v.Parent.Visible = false
                         end
                     end
                 end
             end
         end
     end
 
     Search.FocusLost:Connect(function()
         if Search.Text == "" then
             Search.Text = "Search"
             changetab({library.currenttab[1],library.currenttab[2]})
         end
     end)
 
     Search:GetPropertyChangedSignal("Text"):Connect(function()
         if Search.Text == "Search" or Search.Text == nil then return end
         if Search.Text == "" then
             changetab({library.currenttab[1],library.currenttab[2]})
         end
         search(Search.Text)
     end)
 

local currentNotification = nil

function library:Notify(title, msg, duration, options, callback, Keep)
    local callback = callback or function() end
    local options = options or false
    local Keep = Keep or false
    local textSize = game:GetService("TextService"):GetTextSize(msg, 13, Enum.Font.Gotham, Vector2.new(math.huge, 16))
    assert(title, "a title is required")
    assert(msg, "a message is required")

    local function CloseNoti()
        currentNotification:Destroy()
        currentNotification = nil
    end


    if not currentNotification then
        local NotifyMain = Instance.new("Frame")
        local NotifyMainC = Instance.new("UICorner")
        local Title = Instance.new("TextLabel")
        local Message = Instance.new("TextLabel")
        local Accept = Instance.new("ImageButton")
        local Decline = Instance.new("ImageButton")

        NotifyMain.Name = "NotifyMain"
        NotifyMain.Parent = NotifyHolder
        NotifyMain.BackgroundColor3 = theme.main
        NotifyMain.BorderSizePixel = 0
        NotifyMain.ClipsDescendants = true
        NotifyMain.Position = UDim2.new(1, 3, -0.00100000005, 0)
        NotifyMain.Size = UDim2.new(0, 378, 0, 53)

        NotifyMainC.CornerRadius = UDim.new(0, 3)
        NotifyMainC.Name = "NotifyMainC"
        NotifyMainC.Parent = NotifyMain

        Title.Name = "Title"
        Title.Parent = NotifyMain
        Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Title.BackgroundTransparency = 1.000
        Title.BorderSizePixel = 0
        Title.Size = UDim2.new(0, 336, 0, 24)
        Title.Font = Enum.Font.GothamBold
        Title.Text = "  "..title
        Title.TextColor3 = theme.textcolor
        Title.TextSize = 13.000
        Title.TextWrapped = true
        Title.TextXAlignment = Enum.TextXAlignment.Left

        Message.Name = "Message"
        Message.Parent = NotifyMain
        Message.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Message.BackgroundTransparency = 1.000
        Message.BorderSizePixel = 0
        Message.Position = UDim2.new(0, 0, 0.538855195, 0)
        Message.Size = UDim2.new(0, 336, 0, 16)
        Message.Font = Enum.Font.GothamMedium
        Message.Text = "  "..msg
        Message.TextColor3 = theme.textcolor
        Message.TextSize = 13.000
        Message.TextWrapped = true
        Message.TextXAlignment = Enum.TextXAlignment.Left

        if options then
            Accept.Name = "Accept"
            Accept.Parent = NotifyMain
            Accept.BackgroundTransparency = 1.000
            Accept.Position = UDim2.new(1, -26, 0, 8)
            Accept.Size = UDim2.new(0, 16, 0, 16)
            Accept.ZIndex = 4
            Accept.Image = "rbxassetid://5012538259"
            Accept.ImageColor3 = theme.textcolor

            Decline.Name = "Decline"
            Decline.Parent = NotifyMain
            Decline.BackgroundTransparency = 1.000
            Decline.Position = UDim2.new(1, -26, 1, -24)
            Decline.Size = UDim2.new(0, 16, 0, 16)
            Decline.ZIndex = 4
            Decline.Image = "rbxassetid://5012538583"
            Decline.ImageColor3 = theme.textcolor
        end

        if textSize.X > 300 then
            NotifyMain:TweenSize(UDim2.new(0, textSize.X + 70, 0, 53), "Out", "Sine", 0.2, false)
            Message:TweenSize(UDim2.new(0, textSize.X + 70, 0, 16), "Out", "Sine", 0.2, false)
        end

        if options then
            Accept.MouseButton1Click:Connect(function()
                callback(true)
                CloseNoti()
            end)

            Decline.MouseButton1Click:Connect(function()
                callback(false)
                CloseNoti()
            end)
        end

        currentNotification = NotifyMain
    else

        local NotifyMain = currentNotification
        local Message = NotifyMain:FindFirstChild("Message")
        Message.Text = "  "..msg
    end

    -- Handle duration
    task.spawn(function()
        if Keep == true then
            repeat task.wait() until getgenv().DeleteNotfi
            CloseNoti()
        end
    end)

    if Keep == false then
    if not options then
            spawn(function()
                if not duration then task.wait(15) else task.wait(duration) end
                if currentNotification then
                    CloseNoti()
                end
            end)
        end
    end
    end

 
     function library:ProgressNoti(title,max,precentige)
         local precentige = precentige or false
         assert(title,"a title is required to create a progress notification")
         assert(max,"a maximum number is required")
 
         local ProgressNotify = Instance.new("Frame")
         local ProgressNotifyC = Instance.new("UICorner")
         local Title = Instance.new("TextLabel")
         local Inner = Instance.new("Frame")
         local InnerC = Instance.new("UICorner")
         local Bar = Instance.new("Frame")
         local BarC = Instance.new("UICorner")
         local Back = Instance.new("Frame")
         local BackC = Instance.new("UICorner")
         local Percent = Instance.new("TextLabel")
         local BackLL = Instance.new("UIListLayout")
         local BackP = Instance.new("UIPadding")
 
         ProgressNotify.Name = "ProgressNotify"
         ProgressNotify.Parent = NotifyHolder
         ProgressNotify.BackgroundColor3 =  theme.main
         ProgressNotify.BorderSizePixel = 0
         ProgressNotify.ClipsDescendants = true
         ProgressNotify.Position = UDim2.new(-1, 3, 0.147582695, 0)
         ProgressNotify.Size = UDim2.new(0, 255, 0, 42)
 
         ProgressNotifyC.CornerRadius = UDim.new(0, 3)
         ProgressNotifyC.Name = "ProgressNotifyC"
         ProgressNotifyC.Parent = ProgressNotify
 
         Title.Name = "Title"
         Title.Parent = ProgressNotify
         Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
         Title.BackgroundTransparency = 1.000
         Title.BorderSizePixel = 0
         Title.Size = UDim2.new(0, 186, 0, 24)
         Title.Font = Enum.Font.GothamBold
         Title.Text = " 		"..title
         Title.TextColor3 = theme.textcolor
         Title.TextSize = 13.000
         Title.TextWrapped = true
         Title.TextXAlignment = Enum.TextXAlignment.Left
 
         Inner.Name = "Inner"
         Inner.Parent = ProgressNotify
         Inner.BackgroundColor3 = theme.accentsecondary
         Inner.BorderSizePixel = 0
         Inner.Position = UDim2.new(0.0235294122, 0, 0.68778044, 0)
         Inner.Size = UDim2.new(0, 243, 0, 5)
         Inner.ZIndex = 3
 
         InnerC.CornerRadius = UDim.new(55, 1)
         InnerC.Name = "InnerC"
         InnerC.Parent = Inner
 
         Bar.Name = "Bar"
         Bar.Parent = Inner
         Bar.BackgroundColor3 = theme.textcolor
         Bar.BorderSizePixel = 0
         Bar.Size = UDim2.new(0, 0, 0, 5)
         Bar.ZIndex = 3
 
         BarC.CornerRadius = UDim.new(1, 0)
         BarC.Name = "BarC"
         BarC.Parent = Bar
 
         Back.Name = "Back"
         Back.Parent = ProgressNotify
         Back.BackgroundColor3 = Color3.fromRGB(54, 57, 64)
         Back.BorderSizePixel = 0
         Back.ClipsDescendants = true
         Back.Position = UDim2.new(-0.0117647061, 3, 0.00472586509, 0)
         Back.Size = UDim2.new(0, 255, 0, 42)
         Back.ZIndex = 0
         Back.Transparency = 1
 
         BackC.CornerRadius = UDim.new(0, 3)
         BackC.Name = "BackC"
         BackC.Parent = Back
 
         Percent.Name = "Percent"
         Percent.Parent = Back
         Percent.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
         Percent.BackgroundTransparency = 1.000
         Percent.BorderSizePixel = 0
         Percent.Position = UDim2.new(0.514403224, 0, 0, 0)
         Percent.Size = UDim2.new(0, 40, 0, 13)
         Percent.Font = Enum.Font.GothamBold
         Percent.Text = (precentige and "0%" or "0/"..tostring(max))
         Percent.TextColor3 = theme.textcolor
         Percent.TextSize = 13.000
         Percent.TextWrapped = true
         Percent.TextXAlignment = Enum.TextXAlignment.Right
 
         BackLL.Name = "BackLL"
         BackLL.Parent = Back
         BackLL.HorizontalAlignment = Enum.HorizontalAlignment.Right
         BackLL.SortOrder = Enum.SortOrder.LayoutOrder
 
         BackP.Name = "BackP"
         BackP.Parent = Back
         BackP.PaddingRight = UDim.new(0, 8)
         BackP.PaddingTop = UDim.new(0, 5)
 
         local function Close()
             game:GetService('TweenService'):Create(Inner, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
             game:GetService('TweenService'):Create(Bar, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
             game:GetService('TweenService'):Create(Title, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
             game:GetService('TweenService'):Create(Percent, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
             game:GetService('TweenService'):Create(ProgressNotify, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
             task.wait()
             ProgressNotify:Destroy()
         end
 
         Percent:GetPropertyChangedSignal("Text"):Connect(function()
             if Percent.Text == tostring(max).."/"..tostring(max) or Percent.Text == "100%" then
                 Close()
             end
         end)
 
         local cnum = 0
 
         local funcs = {
             Update = function(value)
                 local newvalue = precentige and cnum + 1 or (string.split(Percent.Text,"/")[1]) + 1
                 local percent = newvalue/max
                 local dec = math.floor(percent * 100)
                 percent = math.clamp(percent, 0, 1)
                 Bar:TweenSize(UDim2.new(percent, 0, 0, 5),"Out","Sine",.1,false)
                 if not precentige then
                     Percent.Text = tostring(newvalue).."/"..max
                 else
                     Percent.Text = dec..'%'
                     cnum = newvalue
                 end
             end,

             DeleteProgress = function()
                Close()
            end
         }
         return funcs
     end
 
     function DestroyUI()
         library.destroyed = true
         Silent:Destroy()
     end
 
     local active = true
     function HideUi()
         active = not active
         Silent.Enabled = active and true or false
     end
 
     function SelectPage(pagename)
         local FTab
         for i,v in next, TabHolder:GetChildren() do
             if v:IsA("TextButton") and v:FindFirstChild("TextLabel").Text == " "..pagename then
                 FTab = v
             end
         end
         changetab({Holder,FTab})
     end
 
     drag(Main, Main)
 
     local tab = {}
 
     function tab:CreateTab(name,icon)
         assert(name, "a name is required to create a tab")
         local TabBtn = Instance.new("TextButton")
         local TabBtnLayout = Instance.new("UIListLayout")
         local TabBtnPadding = Instance.new("UIPadding")
         local Icon = Instance.new("ImageLabel")
         local TextLabel = Instance.new("TextLabel")
 
         TabBtn.Name = name
         TabBtn.Parent = TabHolder
         TabBtn.BackgroundColor3 = Color3.fromRGB(95, 95, 95)
         TabBtn.BackgroundTransparency = 1.000
         TabBtn.BorderColor3 = Color3.fromRGB(0, 166, 255)
         TabBtn.BorderSizePixel = 0
         TabBtn.Size = UDim2.new(0, 129, 0, 25)
         TabBtn.AutoButtonColor = false
         TabBtn.Font = Enum.Font.Gotham
         TabBtn.Text = ""
         TabBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
         TabBtn.TextSize = 15.000
 
         TabBtnLayout.Name = "TabBtnLayout"
         TabBtnLayout.Parent = TabBtn
         TabBtnLayout.FillDirection = Enum.FillDirection.Horizontal
         TabBtnLayout.SortOrder = Enum.SortOrder.LayoutOrder
         TabBtnLayout.VerticalAlignment = Enum.VerticalAlignment.Center
         TabBtnLayout.Padding = UDim.new(0, 3)
 
         TabBtnPadding.Name = "TabBtnPadding"
         TabBtnPadding.Parent = TabBtn
         TabBtnPadding.PaddingLeft = UDim.new(0, 3)
 
         Icon.Name = "Icon"
         Icon.Parent = TabBtn
         Icon.AnchorPoint = Vector2.new(0, 0.5)
         Icon.BackgroundTransparency = 1.000
         Icon.Position = UDim2.new(-1.67533565, 12, 0.290150881, 0)
         Icon.Size = UDim2.new(0, 20, 0, 20)
         Icon.ZIndex = 3
         Icon.Image = "rbxassetid://"..icon
         Icon.ScaleType = Enum.ScaleType.Fit
 
         TextLabel.Parent = TabBtn
         TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
         TextLabel.BackgroundTransparency = 1.000
         TextLabel.BorderSizePixel = 0
         TextLabel.Position = UDim2.new(0.172255695, 0, 0.0745565519, 0)
         TextLabel.Size = UDim2.new(0.831201971, 0, 0.850887954, 0)
         TextLabel.Font = Enum.Font.GothamMedium
         TextLabel.Text = " "..name
         TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
         TextLabel.TextSize = 13.000
         TextLabel.TextXAlignment = Enum.TextXAlignment.Left
 
         TabBtn.MouseButton1Click:Connect(function()
             if library.locked then return end
             changetab({Holder,TabBtn})
         end)
 
         HolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
             Holder.CanvasSize = UDim2.new(0, 0, 0, HolderL.AbsoluteContentSize.Y + 16)
         end)
 
         local section = {}
 
         function section:CreateSection(title)
             local Section = Instance.new("Frame")
             local SectionC = Instance.new("UICorner")
             local SectionL = Instance.new("UIListLayout")
             local SectionP = Instance.new("UIPadding")
             local TextLabel = Instance.new("TextLabel")
 
             Section.Name = "Section"..TabBtn.Name
             Section.Parent = Holder
             Section.BackgroundColor3 = theme.secondary
             Section.BorderSizePixel = 0
             Section.Position = UDim2.new(0.0408163257, 0, 0, 0)
             Section.Size = UDim2.new(0, 367, 0, 372)
             Section.Visible = false
 
             SectionC.CornerRadius = UDim.new(0, 3)
             SectionC.Name = "SectionC"
             SectionC.Parent = Section
 
             SectionL.Name = "SectionL"
             SectionL.Parent = Section
             SectionL.HorizontalAlignment = Enum.HorizontalAlignment.Center
             SectionL.SortOrder = Enum.SortOrder.LayoutOrder
             SectionL.Padding = UDim.new(0, 5)
 
             SectionP.Name = "SectionP"
             SectionP.Parent = Section
             SectionP.PaddingTop = UDim.new(0, 5)
 
             TextLabel.Parent = Section
             TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
             TextLabel.BackgroundTransparency = 1.000
             TextLabel.BorderSizePixel = 0
             TextLabel.Size = UDim2.new(0, 366, 0, 24)
             TextLabel.Font = Enum.Font.GothamMedium
             TextLabel.Text = "  "..title
             TextLabel.TextColor3 = theme.textcolor
             TextLabel.TextSize = 14
             TextLabel.TextWrapped = true
             TextLabel.TextXAlignment = Enum.TextXAlignment.Left
 
             SectionL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                 Section.Size = UDim2.new(0, 371, 0, SectionL.AbsoluteContentSize.Y + 14)
             end)
 
             local Holder = {}
 
             function Holder:Button(name,callback)
                 local callback = callback or function() end
                 assert(name,"a name is required to create a button")
 
                 local Btn = Instance.new("TextButton")
                 local BtnC = Instance.new("UICorner")
 
                 Btn.Name = "Btn"
                 Btn.Parent = Section
                 Btn.BackgroundColor3 = theme.accent
                 Btn.BorderSizePixel = 0
                 Btn.Position = UDim2.new(0.0204359666, 0, 0.0790190771, 0)
                 Btn.Size = UDim2.new(0, 352, 0, 33)
                 Btn.AutoButtonColor = false
                 Btn.Font = Enum.Font.GothamMedium
                 Btn.TextColor3 = theme.textcolor
                 Btn.TextSize = 13.000
                 Btn.Text = name
 
                 BtnC.CornerRadius = UDim.new(0, 3)
                 BtnC.Name = "BtnC"
                 BtnC.Parent = Btn
 
                 local funcs = {
                     ChangeText = function(self,txt)
                         if Btn.Text == txt then return end
                         Btn.Text = txt
                     end,
 
                     DeleteButton = function(self)
                         Btn:Destroy()
                     end,
 
                     GetTxt = function(self)
                         return Btn.Text
                     end,
                 }
 
                 Btn.MouseButton1Click:Connect(function()
                     if library.locked then return end
                     spawn(callback)
                     game:GetService("TweenService"):Create(Btn, TweenInfo.new(0.1), {BackgroundColor3 = theme.lightcontrast}):Play()
                     task.wait(0.1)
                     game:GetService("TweenService"):Create(Btn, TweenInfo.new(0.1), {BackgroundColor3 = theme.accent}):Play()
                 end)
                 return funcs
             end
 
             function Holder:Label(name)
                 assert(name,"text is required to create a label")
                 local Label = Instance.new("TextButton")
                 local LabelC = Instance.new("UICorner")
 
                 Label.Name = "Label"
                 Label.Parent = Section
                 Label.BackgroundColor3 = theme.accent
                 Label.BorderSizePixel = 0
                 Label.Position = UDim2.new(0.0204359666, 0, 0.389645785, 0)
                 Label.Size = UDim2.new(0, 352, 0, 24)
                 Label.AutoButtonColor = false
                 Label.Font = Enum.Font.GothamMedium
                 Label.Text = name
                 Label.TextColor3 = theme.textcolor
                 Label.TextSize = 13.000
                 Label.TextWrapped = true
 
                 LabelC.CornerRadius = UDim.new(0, 3)
                 LabelC.Name = "LabelC"
                 LabelC.Parent = Label
                 return Label
             end
 
             function Holder:KeyBind(name,default,callback)
                 local callback = callback or function() end
                 assert(name,"a name is required to create a keybind")
                 assert(default,"a default key is required to create a keybind")
 
                 local default = (typeof(default) == "string" and Enum.KeyCode[default] or default)
 
                 local banned = {
                     Return = true;
                     Space = true;
                     Tab = true;
                     Backquote = true;
                     CapsLock = true;
                     Escape = true;
                     Unknown = true;
                 }
 
                 local shortNames = {
                     RightControl = 'Right Ctrl',
                     LeftControl = 'Left Ctrl',
                     LeftShift = 'Left Shift',
                     RightShift = 'Right Shift',
                     Semicolon = ";",
                     Quote = '"',
                     LeftBracket = '[',
                     RightBracket = ']',
                     Equals = '=',
                     Minus = '-',
                     RightAlt = 'Right Alt',
                     LeftAlt = 'Left Alt'
                 }
 
                 local bindKey = default
                 local keyTxt = (default and (shortNames[default.Name] or default.Name) or "None")
 
                 local KeyBind = Instance.new("TextButton")
                 local KeyBindC = Instance.new("UICorner")
                 local Click = Instance.new("TextButton")
                 local ClickC = Instance.new("UICorner")
                 local UIListLayout = Instance.new("UIListLayout")
                 local UIPadding = Instance.new("UIPadding")
 
                 KeyBind.Name = "KeyBind"
                 KeyBind.Parent = Section
                 KeyBind.BackgroundColor3 = theme.accent
                 KeyBind.BorderSizePixel = 0
                 KeyBind.Position = UDim2.new(0.0204359666, 0, 0.174386919, 0)
                 KeyBind.Size = UDim2.new(0, 352, 0, 33)
                 KeyBind.ZIndex = 3
                 KeyBind.AutoButtonColor = false
                 KeyBind.Font = Enum.Font.GothamMedium
                 KeyBind.Text = "  "..name
                 KeyBind.TextColor3 = theme.textcolor
                 KeyBind.TextSize = 13.000
                 KeyBind.TextXAlignment = Enum.TextXAlignment.Left
 
                 KeyBindC.CornerRadius = UDim.new(0, 3)
                 KeyBindC.Name = "KeyBindC"
                 KeyBindC.Parent = KeyBind
 
                 Click.Name = "Click"
                 Click.Parent = KeyBind
                 Click.BackgroundColor3 = theme.accentsecondary 
                 Click.BorderSizePixel = 0
                 Click.Position = UDim2.new(0.771000028, 0, 0.170000002, 0)
                 Click.Size = UDim2.new(0, 74, 0, 22)
                 Click.ZIndex = 3
                 Click.AutoButtonColor = false
                 Click.Font = Enum.Font.GothamMedium
                 Click.Text = keyTxt
                 Click.TextColor3 = theme.textcolor
                 Click.TextSize = 12.000
 
                 ClickC.CornerRadius = UDim.new(0, 4)
                 ClickC.Name = "ClickC"
                 ClickC.Parent = Click
 
                 UIListLayout.Parent = KeyBind
                 UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
                 UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                 UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
 
                 UIPadding.Parent = KeyBind
                 UIPadding.PaddingRight = UDim.new(0, 6)
 
                 game:GetService("UserInputService").InputBegan:Connect(function(inp, gpe)
                     if library.destroyed then return end
                     if gpe then return end
                     if inp.UserInputType ~= Enum.UserInputType.Keyboard then return end
                     if inp.KeyCode ~= bindKey then return end
                     callback(bindKey.Name)
                 end)
 
                 Click.MouseButton1Click:Connect(function()
                     if library.locked then return end
                     Click.Text = "..."
                     wait()
                     local key, uwu = game.UserInputService.InputEnded:Wait()
                     local keyName = tostring(key.KeyCode.Name)
                     if key.UserInputType ~= Enum.UserInputType.Keyboard then
                         Click.Text = keyTxt
                         return
                     end
                     if banned[keyName] then
                         Click.Text = keyTxt
                         return
                     end
                     wait()
                     bindKey = Enum.KeyCode[keyName]
                     Click.Text = shortNames[keyName] or keyName
                 end)
 
                 Click:GetPropertyChangedSignal("TextBounds"):Connect(function()
                     Click.Size = UDim2.new(0, Click.TextBounds.X + 30, 0, 22)
                 end)
                 Click.Size = UDim2.new(0, Click.TextBounds.X + 30, 0, 22)
             end
 
             function Holder:TextBox(name,default,callback)
                 local callback = callback or function() end
                 local flag = name
                 assert(name,"a name is required to create a textbox")
                 assert(default,"default text is required to create a textbox")
                 library.flags[flag] = default
 
                 local TextBox = Instance.new("TextButton")
                 local TextBoxC = Instance.new("UICorner")
                 local Input = Instance.new("TextBox")
                 local InputC = Instance.new("UICorner")
                 local UIListLayout = Instance.new("UIListLayout")
                 local UIPadding = Instance.new("UIPadding")
 
                 TextBox.Name = "TextBox"
                 TextBox.Parent = Section
                 TextBox.BackgroundColor3 = theme.accent
                 TextBox.BorderSizePixel = 0
                 TextBox.Position = UDim2.new(0.0204359666, 0, 0.174386919, 0)
                 TextBox.Size = UDim2.new(0, 352, 0, 33)
                 TextBox.ZIndex = 3
                 TextBox.AutoButtonColor = false
                 TextBox.Font = Enum.Font.GothamMedium
                 TextBox.Text = "  TextBox"
                 TextBox.TextColor3 = theme.textcolor
                 TextBox.TextSize = 13.000
                 TextBox.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
                 TextBox.TextXAlignment = Enum.TextXAlignment.Left
 
                 TextBoxC.CornerRadius = UDim.new(0, 3)
                 TextBoxC.Name = "TextBoxC"
                 TextBoxC.Parent = TextBox
 
                 Input.Name = "Input"
                 Input.Parent = TextBox
                 Input.BackgroundColor3 = theme.accentsecondary 
                 Input.BorderSizePixel = 0
                 Input.Position = UDim2.new(0.771000028, 0, 0.170000002, 0)
                 Input.Size = UDim2.new(0, 74, 0, 22)
                 Input.Font = Enum.Font.GothamMedium
                 Input.Text = default
                 Input.TextColor3 = theme.textcolor
                 Input.TextSize = 12.000
                 Input.TextWrapped = true
 
                 InputC.CornerRadius = UDim.new(0, 4)
                 InputC.Name = "InputC"
                 InputC.Parent = Input
 
                 UIListLayout.Parent = TextBox
                 UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
                 UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                 UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
 
                 UIPadding.Parent = TextBox
                 UIPadding.PaddingRight = UDim.new(0, 6)
 
                 Input.FocusLost:Connect(function()
                     if library.locked then
                         Input.Text = default
                         return 
                     end
                     if Input.Text == "" then
                         Input.Text = default
                     end
                     library.flags[flag] = Input.Text
                     callback(Input.Text)
                 end)
 
                 Input:GetPropertyChangedSignal("TextBounds"):Connect(function()
                     Input.Size = UDim2.new(0, Input.TextBounds.X + 30, 0, 22)
                 end)
                 Input.Size = UDim2.new(0, Input.TextBounds.X + 30, 0, 22)
             end
 
             function Holder:Toggle(name,default,callback)
                 local callback = callback or function() end
                 local default = default or false
                 assert(name,"a name is required to create a toggle")
                 local flag = name
                 library.flags[flag] = default
 
                 local Toggle = Instance.new("TextButton")
                 local ToggleC = Instance.new("UICorner")
                 local Inner = Instance.new("Frame")
                 local ClickC = Instance.new("UICorner")
                 local Circle = Instance.new("Frame")
                 local ClickC_2 = Instance.new("UICorner")
 
                 Toggle.Name = "Toggle"
                 Toggle.Parent = Section
                 Toggle.BackgroundColor3 = theme.accent
                 Toggle.BorderSizePixel = 0
                 Toggle.Position = UDim2.new(0.0395095348, 0, 0.160762936, 0)
                 Toggle.Size = UDim2.new(0, 352, 0, 33)
                 Toggle.ZIndex = 3
                 Toggle.AutoButtonColor = false
                 Toggle.Font = Enum.Font.GothamMedium
                 Toggle.Text = "  "..name
                 Toggle.TextColor3 = theme.textcolor
                 Toggle.TextSize = 13.000
                 Toggle.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
                 Toggle.TextXAlignment = Enum.TextXAlignment.Left
 
                 ToggleC.CornerRadius = UDim.new(0, 3)
                 ToggleC.Name = "ToggleC"
                 ToggleC.Parent = Toggle
 
                 Inner.Name = "Inner"
                 Inner.Parent = Toggle
                 Inner.BackgroundColor3 = theme.accentsecondary 
                 Inner.BorderSizePixel = 0
                 Inner.Position = UDim2.new(0.864749908, 0, 0.200302586, 0)
                 Inner.Size = UDim2.new(0, 41, 0, 19)
                 Inner.ZIndex = 3
 
                 ClickC.CornerRadius = UDim.new(1, 0)
                 ClickC.Name = "ClickC"
                 ClickC.Parent = Inner
 
                 Circle.Name = "Circle"
                 Circle.Parent = Inner
                 Circle.BackgroundColor3 = theme.textcolor
                 Circle.BorderSizePixel = 0
                 Circle.Position = UDim2.new(0.100000001, 0, 0.158000007, 0)
                 Circle.Size = UDim2.new(0, 13, 0, 13)
                 Circle.ZIndex = 3
 
                 ClickC_2.CornerRadius = UDim.new(5, 0)
                 ClickC_2.Name = "ClickC"
                 ClickC_2.Parent = Circle
 
                 local funcs = {}
 
                 funcs.Set = function(self,Value)
                     if Value == nil then
                         Value = not library.flags[flag]
                     end
                     Circle:TweenPosition(Value and UDim2.new(0.6, 0,0.158, 0) or UDim2.new(0.1, 0,0.158, 0),"Out","Sine",0.1,false)
                     game:GetService("TweenService"):Create(Inner, TweenInfo.new(0.1), {BackgroundColor3 = (Value and theme.lightcontrast or theme.accentsecondary)}):Play()
                     library.flags[flag] = Value
                     callback(Value)
                 end
 
                 if default then
                     funcs:Set(true)
                 end
 
                 Toggle.MouseButton1Click:Connect(function()
                     if library.locked then return end
                     funcs:Set()
                 end)
                 return funcs
             end
 
             function Holder:Slider(name,default,min,max,precise,callback)
                 local callback = callback or function() end
                 local min = min or 1 
                 local max = max or 10
                 local default = default or min
                 local precise = precise or false
                 local flag = name
                 assert(name,"a name is required to create a slider")
                 library.flags[flag] = default
 
                 local Slider = Instance.new("TextButton")
                 local SliderC = Instance.new("UICorner")
                 local Title = Instance.new("TextLabel")
                 local Bar = Instance.new("Frame")
                 local BarC = Instance.new("UICorner")
                 local Inner = Instance.new("Frame")
                 local InnerC = Instance.new("UICorner")
                 local Circle = Instance.new("Frame")
                 local CircleC = Instance.new("UICorner")
                 local Number = Instance.new("TextBox")
 
                 Slider.Name = "Slider"
                 Slider.Parent = Section
                 Slider.BackgroundColor3 = theme.accent
                 Slider.BorderSizePixel = 0
                 Slider.Position = UDim2.new(0.0204359666, 0, 0.572207153, 0)
                 Slider.Size = UDim2.new(0, 352, 0, 47)
                 Slider.AutoButtonColor = false
                 Slider.Font = Enum.Font.GothamMedium
                 Slider.Text = name
                 Slider.TextColor3 = theme.textcolor
                 Slider.TextSize = 13.000
                 Slider.TextTransparency = 1
 
                 SliderC.CornerRadius = UDim.new(0, 3)
                 SliderC.Name = "SliderC"
                 SliderC.Parent = Slider
 
                 Title.Name = "Title"
                 Title.Parent = Slider
                 Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                 Title.BackgroundTransparency = 1.000
                 Title.Position = UDim2.new(0, 0, 0.108081058, 0)
                 Title.Size = UDim2.new(0, 188, 0, 17)
                 Title.ZIndex = 4
                 Title.Font = Enum.Font.GothamMedium
                 Title.Text = "  "..name
                 Title.TextColor3 = theme.textcolor
                 Title.TextSize = 13.000
                 Title.TextXAlignment = Enum.TextXAlignment.Left
 
                 Bar.Name = "Bar"
                 Bar.Parent = Slider
                 Bar.BackgroundColor3 = theme.accentsecondary
                 Bar.BorderSizePixel = 0
                 Bar.Position = UDim2.new(0.0204360262, 0, 0.691390693, 0)
                 Bar.Size = UDim2.new(0, 337, 0, 4)
 
                 BarC.CornerRadius = UDim.new(1, 0)
                 BarC.Name = "BarC"
                 BarC.Parent = Bar
 
                 Inner.Name = "Inner"
                 Inner.Parent = Bar
                 Inner.BackgroundColor3 = theme.textcolor
                 Inner.BorderSizePixel = 0
                 Inner.Size = UDim2.new(0.894060731, 0, 1, 0)
 
                 InnerC.CornerRadius = UDim.new(0, 9999)
                 InnerC.Name = "InnerC"
                 InnerC.Parent = Inner
 
                 Circle.Name = "Circle"
                 Circle.Parent = Inner
                 Circle.BackgroundColor3 = theme.textcolor
                 Circle.Position = UDim2.new(0.979818106, 0, -0.75, 0)
                 Circle.Size = UDim2.new(0, 10, 0, 10)
 
                 CircleC.CornerRadius = UDim.new(0, 9999)
                 CircleC.Name = "CircleC"
                 CircleC.Parent = Circle
 
                 Number.Name = "Number"
                 Number.Parent = Slider
                 Number.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                 Number.BackgroundTransparency = 1.000
                 Number.Position = UDim2.new(0.742874861, 0, 0.108080924, 0)
                 Number.Size = UDim2.new(0, 82, 0, 17)
                 Number.ZIndex = 4
                 Number.Font = Enum.Font.GothamMedium
                 Number.Text = "200"
                 Number.TextColor3 = theme.textcolor
                 Number.TextSize = 13.000
                 Number.TextXAlignment = Enum.TextXAlignment.Right
 
                 local funcs = {}
 
                 funcs.Set = function(self,value)
                     local percent = (mouse.X - Bar.AbsolutePosition.X) / Bar.AbsoluteSize.X
                     if value then
                         percent = (value - min) / (max - min)
                     end
                     percent = math.clamp(percent, 0, 1)
                     if precise then
                         value = value or tonumber(string.format("%.1f", tostring(min + (max - min) * percent)))
                     else
                         value = value or math.floor(min + (max - min) * percent)
                     end
                     library.flags[flag] = tonumber(value)
                     Number.Text = tostring(value)
                     Inner.Size = UDim2.new(percent, 0, 1, 0)
                     callback(tonumber(value))
                 end
 
                 funcs:Set(tonumber(default))
 
                 local dragging, boxFocused, allowed = false, false, {
                     [""] = true,
                     ["-"] = true
                 }
 
                 Slider.InputBegan:Connect(function(input)
                     if library.locked then return end
                     if input.UserInputType == Enum.UserInputType.MouseButton1 then
                         funcs:Set()
                         dragging = true
                     end
                 end)
 
                 game:GetService("UserInputService").InputEnded:Connect(function(input)
                     if library.locked then return end
                     if dragging and input.UserInputType == Enum.UserInputType.MouseButton1 then
                         dragging = false
                     end
                 end)
 
                 game:GetService("UserInputService").InputChanged:Connect(function(input)
                     if library.locked then return end
                     if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                         funcs:Set()
                     end
                 end)
 
                 Number.Focused:Connect(function()
                     if library.locked then return end
                     boxFocused = true
                 end)
 
                 Number.FocusLost:Connect(function()
                     if library.locked then return end
                     boxFocused = false
                     if Number.Text == "" then
                         funcs:Set(default)
                     end
                     if tonumber(Number.Text) < min then
                         Number.Text = min
                         Number.Text = tonumber(min)
                     end
                 end)
 
                 Number:GetPropertyChangedSignal("Text"):Connect(function()
                     if library.locked then return end
                     if not boxFocused then return end
                     Number.Text = Number.Text:gsub("%D+", "")
 
                     local text = Number.Text
 
                     if not tonumber(text) then
                         Number.Text = Number.Text:gsub('%D+', '')
                     elseif not allowed[text] then
                         if tonumber(text) > max then
                             text = max
                             Number.Text = tostring(max)
                         end
                         if tonumber(text) >= min then
                             funcs:Set(tonumber(text))
                         end
                     end
                 end)
                 return funcs
             end
 
             function Holder:DropDown(name,options,reset,callback)
                 local callback = callback or function() end
                 local reset = reset or false
                 local flag = name
                 assert(name,"a name is required to create a dropdown")
 
                 local DropDown = Instance.new("TextButton")
                 local DropDownC = Instance.new("UICorner")
                 local Search = Instance.new("TextBox")
                 local SearchP = Instance.new("UIPadding")
                 local Arrow = Instance.new("ImageButton")
                 local DropDownHolder = Instance.new("Frame")
                 local OptionHolder = Instance.new("ScrollingFrame")
                 local OptionHolderL = Instance.new("UIListLayout")
                 local DDHC = Instance.new("UICorner")
 
                 DropDown.Name = "DropDown"
                 DropDown.Parent = Section
                 DropDown.BackgroundColor3 = theme.accent
                 DropDown.BorderSizePixel = 0
                 DropDown.ClipsDescendants = true
                 DropDown.Position = UDim2.new(0.0204359666, 0, 0.0790190771, 0)
                 DropDown.Size = UDim2.new(0, 352, 0, 33)
                 DropDown.AutoButtonColor = false
                 DropDown.Font = Enum.Font.GothamMedium
                 DropDown.Text = name
                 DropDown.TextColor3 = theme.textcolor
                 DropDown.TextSize = 13.000
                 DropDown.TextTransparency = 1
 
                 DropDownC.CornerRadius = UDim.new(0, 3)
                 DropDownC.Name = "DropDownC"
                 DropDownC.Parent = DropDown
 
                 Search.Name = "Search"
                 Search.Parent = DropDown
                 Search.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                 Search.BackgroundTransparency = 1.000
                 Search.BorderColor3 = Color3.fromRGB(27, 42, 53)
                 Search.BorderSizePixel = 0
                 Search.Size = UDim2.new(0, 304, 0, 33)
                 Search.Font = Enum.Font.GothamMedium
                 Search.Text = name
                 Search.TextColor3 = theme.textcolor
                 Search.TextSize = 13.000
                 Search.TextXAlignment = Enum.TextXAlignment.Left
 
                 SearchP.Name = "SearchP"
                 SearchP.Parent = Search
                 SearchP.PaddingLeft = UDim.new(0, 6)
 
                 Arrow.Name = "Arrow"
                 Arrow.Parent = DropDown
                 Arrow.BackgroundTransparency = 1.000
                 Arrow.BorderSizePixel = 0
                 Arrow.ClipsDescendants = true
                 Arrow.Position = UDim2.new(1.00139761, -28, 0.303030312, -9)
                 Arrow.Rotation = 90.000
                 Arrow.Size = UDim2.new(0, 23, 0, 31)
                 Arrow.ZIndex = 1
                 Arrow.Image = "rbxassetid://5012539403"
                 Arrow.SliceCenter = Rect.new(2, 2, 298, 298)
                 Arrow.ImageColor3 = theme.textcolor
 
                 DropDownHolder.Name = "DropDownHolder "..name
                 DropDownHolder.Parent = Section
                 DropDownHolder.BackgroundColor3 = Color3.fromRGB(36, 37, 41)
                 DropDownHolder.BorderSizePixel = 0
                 DropDownHolder.ClipsDescendants = true
                 DropDownHolder.Position = UDim2.new(0.0204359666, 0, 0.398406386, 0)
                 DropDownHolder.Size = UDim2.new(0, 352, 0, 0)
                 DropDownHolder.Visible = false
 
                 OptionHolder.Name = "OptionHolder"
                 OptionHolder.Parent = DropDownHolder
                 OptionHolder.Active = true
                 OptionHolder.BackgroundColor3 = Color3.fromRGB(36, 37, 41)
                 OptionHolder.BorderSizePixel = 0
                 OptionHolder.Position = UDim2.new(0, 0, 0.0413798429, 0)
                 OptionHolder.Size = UDim2.new(0, 351, 0, 146)
                 OptionHolder.CanvasSize = UDim2.new(0, 0, 0, 0)
                 OptionHolder.ScrollBarThickness = 0
 
                 OptionHolderL.Name = "OptionHolderL"
                 OptionHolderL.Parent = OptionHolder
                 OptionHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
                 OptionHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                 OptionHolderL.Padding = UDim.new(0, 5)
 
                 DDHC.CornerRadius = UDim.new(0, 3)
                 DDHC.Name = "DDHC"
                 DDHC.Parent = DropDownHolder
 
                 Search:GetPropertyChangedSignal("Text"):connect(function()
                     Search.TextXAlignment = Search.TextFits and Enum.TextXAlignment.Left or Enum.TextXAlignment.Right
                 end)
 
                 local function showall()
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then 
                             v.Visible = true
                         end
                     end
                 end
 
                 local function search(text)
                     if text == "" then
                         showall()
                     end
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then
                             if v.Text:lower():match(text:lower()) then
                                 v.Visible = true
                             else
                                 v.Visible = false
                             end
                         end
                     end
                 end
 
                 local isopen = false
                 local function opendd()
                     isopen = not isopen
                     if isopen then
                         DropDownHolder.Visible = true
                     end
                     Arrow.Rotation = isopen and 0 or 90
                     DropDownHolder:TweenSize(UDim2.new(0, 352,0, (isopen and 153 or 0)),"Out","Sine",0.3,false)
                     if not isopen then
                         DropDownHolder.Visible = false
                     end
                     showall()
                 end
 
                 Search:GetPropertyChangedSignal("Text"):Connect(function()
                     if not isopen then return end
                     if Search.Text == name then return end
                     search(Search.Text)
                 end)
 
                 local issearching = false
                 Search.Focused:Connect(function()
                    task.wait()
                    if not isopen then
                    opendd()
                    end
                    issearching = true
                 end)
 
                 Search.FocusLost:Connect(function()
                     if Search.Text == "" then
                         Search.Text = name
                     end
                     if reset then
                         if issearching then return end
                         Search.Text = name
                     end
                     if isopen then
                         --opendd()
                     end
                 end)
 
                 Arrow.MouseButton1Click:Connect(function()
                     if library.locked then return end
                     opendd()
                 end)
 
                 OptionHolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                     OptionHolder.CanvasSize = UDim2.new(0, 0, 0, OptionHolderL.AbsoluteContentSize.Y + 10)
                 end)
 
                 local current
                 local funcs = {}
 
                 funcs.AddOption = function(self,opname)
                     local Option = Instance.new("TextButton")
                     local BtnC = Instance.new("UICorner")
 
                     Option.Name = "Option"
                     Option.Parent = OptionHolder
                     Option.BackgroundColor3 = theme.accentsecondary 
                     Option.BorderSizePixel = 0
                     Option.Position = UDim2.new(0.00997150969, 0, 0, 0)
                     Option.Size = UDim2.new(0, 344, 0, 31)
                     Option.AutoButtonColor = false
                     Option.Font = Enum.Font.GothamMedium
                     Option.Text = opname
                     Option.TextColor3 = theme.textcolor
                     Option.TextSize = 13.000
 
                     BtnC.CornerRadius = UDim.new(0, 3)
                     BtnC.Name = "BtnC"
                     BtnC.Parent = Option
 
                     Option.MouseButton1Click:Connect(function()
                         callback(Option.Text)
                         library.flags[flag] = Option.Text
                         opendd()
                         issearching = false
                         if not reset then
                             Search.Text = "Selected: "..Option.Text
                             if current ~= nil then
                                 current.TextColor3 = Color3.fromRGB(225,225,225)
                             end
                             Option.TextColor3 = Color3.fromRGB(194, 149, 2)
                             current = Option
                         else
                             Search.Text = name
                         end
                     end)
                 end
 
                 funcs.SetList = function(self,options)
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then
                             v:Destroy()
                         end
                     end
                     for i,v in next, options do
                         funcs:AddOption(v)
                     end
                 end
 
                 funcs.RemoveOption = function(self,name)
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then
                             if v.Text == name then
                                 v:Destroy()
                             end
                         end
                     end
                 end
 
                 funcs:SetList(options)
                 return funcs
             end
 
             function Holder:PlrList(name,reset,addclient,callback)
                 local callback = callback or function() end
                 local reset = reset or false
                 local addclient = addclient or false
                 assert(name,"a name is required to create a dropdown")
                 local flag = name
 
                 local function CreatList()
                     local plrs = {}
                     for i,v in next, game.Players:GetPlayers() do
                         if v.Name ~= game.Players.LocalPlayer.Name then
                             table.insert(plrs,v.Name)
                         end
                     end
                     if addclient then 
                         table.insert(plrs,game.Players.LocalPlayer.Name)
                     end
                     return plrs
                 end
 
                 local DropDown = Instance.new("TextButton")
                 local DropDownC = Instance.new("UICorner")
                 local Search = Instance.new("TextBox")
                 local SearchP = Instance.new("UIPadding")
                 local Arrow = Instance.new("ImageButton")
                 local DropDownHolder = Instance.new("Frame")
                 local OptionHolder = Instance.new("ScrollingFrame")
                 local OptionHolderL = Instance.new("UIListLayout")
                 local DDHC = Instance.new("UICorner")
 
                 DropDown.Name = "DropDown"
                 DropDown.Parent = Section
                 DropDown.BackgroundColor3 = theme.accent
                 DropDown.BorderSizePixel = 0
                 DropDown.ClipsDescendants = true
                 DropDown.Position = UDim2.new(0.0204359666, 0, 0.0790190771, 0)
                 DropDown.Size = UDim2.new(0, 352, 0, 33)
                 DropDown.AutoButtonColor = false
                 DropDown.Font = Enum.Font.GothamMedium
                 DropDown.Text = name
                 DropDown.TextColor3 = theme.textcolor
                 DropDown.TextSize = 13.000
                 DropDown.TextTransparency = 1
 
                 DropDownC.CornerRadius = UDim.new(0, 3)
                 DropDownC.Name = "DropDownC"
                 DropDownC.Parent = DropDown
 
                 Search.Name = "Search"
                 Search.Parent = DropDown
                 Search.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                 Search.BackgroundTransparency = 1.000
                 Search.BorderColor3 = Color3.fromRGB(27, 42, 53)
                 Search.BorderSizePixel = 0
                 Search.Size = UDim2.new(0, 304, 0, 33)
                 Search.Font = Enum.Font.GothamMedium
                 Search.Text = name
                 Search.TextColor3 = theme.textcolor
                 Search.TextSize = 13.000
                 Search.TextXAlignment = Enum.TextXAlignment.Left
 
                 SearchP.Name = "SearchP"
                 SearchP.Parent = Search
                 SearchP.PaddingLeft = UDim.new(0, 6)
 
                 Arrow.Name = "Arrow"
                 Arrow.Parent = DropDown
                 Arrow.BackgroundTransparency = 1.000
                 Arrow.BorderSizePixel = 0
                 Arrow.ClipsDescendants = true
                 Arrow.Position = UDim2.new(1.00139761, -28, 0.303030312, -9)
                 Arrow.Rotation = 90.000
                 Arrow.Size = UDim2.new(0, 23, 0, 31)
                 Arrow.ZIndex = 1
                 Arrow.Image = "rbxassetid://5012539403"
                 Arrow.SliceCenter = Rect.new(2, 2, 298, 298)
                 Arrow.ImageColor3 = theme.textcolor
 
                 DropDownHolder.Name = "DropDownHolder "..name
                 DropDownHolder.Parent = Section
                 DropDownHolder.BackgroundColor3 = Color3.fromRGB(36, 37, 41)
                 DropDownHolder.BorderSizePixel = 0
                 DropDownHolder.ClipsDescendants = true
                 DropDownHolder.Position = UDim2.new(0.0204359666, 0, 0.398406386, 0)
                 DropDownHolder.Size = UDim2.new(0, 352, 0, 0)
                 DropDownHolder.Visible = false
 
                 OptionHolder.Name = "OptionHolder"
                 OptionHolder.Parent = DropDownHolder
                 OptionHolder.Active = true
                 OptionHolder.BackgroundColor3 = Color3.fromRGB(36, 37, 41)
                 OptionHolder.BorderSizePixel = 0
                 OptionHolder.Position = UDim2.new(0, 0, 0.0413798429, 0)
                 OptionHolder.Size = UDim2.new(0, 351, 0, 146)
                 OptionHolder.CanvasSize = UDim2.new(0, 0, 0, 0)
                 OptionHolder.ScrollBarThickness = 0
 
                 OptionHolderL.Name = "OptionHolderL"
                 OptionHolderL.Parent = OptionHolder
                 OptionHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
                 OptionHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                 OptionHolderL.Padding = UDim.new(0, 5)
 
                 DDHC.CornerRadius = UDim.new(0, 3)
                 DDHC.Name = "DDHC"
                 DDHC.Parent = DropDownHolder
 
                 Search:GetPropertyChangedSignal("Text"):connect(function()
                     Search.TextXAlignment = Search.TextFits and Enum.TextXAlignment.Left or Enum.TextXAlignment.Right
                 end)
 
                 local function showall()
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then 
                             v.Visible = true
                         end
                     end
                 end
 
                 local function search(text)
                     if text == "" then
                         showall()
                     end
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then
                             if v.Text:lower():match(text:lower()) then
                                 v.Visible = true
                             else
                                 v.Visible = false
                             end
                         end
                     end
                 end
 
                 local isopen = false
                 local function opendd()
                     isopen = not isopen
                     if isopen then
                         DropDownHolder.Visible = true
                     end
                     Arrow.Rotation = isopen and 0 or 90
                     DropDownHolder:TweenSize(UDim2.new(0, 352,0, (isopen and 153 or 0)),"Out","Sine",0.3,false)
                     task.wait(0.3)
                     if not isopen then
                         DropDownHolder.Visible = false
                     end
                 end
 
                 Search:GetPropertyChangedSignal("Text"):Connect(function()
                     if not isopen then return end
                     if Search.Text == name then return end
                     search(Search.Text)
                 end)
 
                 local issearching = false
                 Search.Focused:Connect(function()
                     issearching = true
                 end)
 
                 Search.FocusLost:Connect(function()
                     if Search.Text == "" then
                         Search.Text = name
                         issearching = false
                     end
                     if reset then
                         if issearching then return end
                         Search.Text = name
                     end
                     if isopen then
                         opendd()
                     end
                 end)
 
                 OptionHolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                     OptionHolder.CanvasSize = UDim2.new(0, 0, 0, OptionHolderL.AbsoluteContentSize.Y + 10)
                 end)
 
                 local funcs = {}
                 local current 
                 funcs.AddOption = function(self,opname)
                     local Option = Instance.new("TextButton")
                     local BtnC = Instance.new("UICorner")
 
                     Option.Name = "Option"
                     Option.Parent = OptionHolder
                     Option.BackgroundColor3 = theme.accentsecondary
                     Option.BorderSizePixel = 0
                     Option.Position = UDim2.new(0.00997150969, 0, 0, 0)
                     Option.Size = UDim2.new(0, 344, 0, 31)
                     Option.AutoButtonColor = false
                     Option.Font = Enum.Font.GothamMedium
                     Option.Text = opname
                     Option.TextColor3 = theme.textcolor
                     Option.TextSize = 13.000
 
                     BtnC.CornerRadius = UDim.new(0, 3)
                     BtnC.Name = "BtnC"
                     BtnC.Parent = Option
 
                     Option.MouseButton1Click:Connect(function()
                         callback(Option.Text)
                         library.flags[flag] = Option.Text
                         opendd()
                         issearching = false
                         if not reset then
                             Search.Text = "Selected: "..Option.Text
                             if current ~= nil then
                                 current.TextColor3 = Color3.fromRGB(225,225,225)
                             end
                             Option.TextColor3 = Color3.fromRGB(194, 149, 2)
                             current = Option
                         else
                             Search.Text = name
                         end
                     end)
                 end
 
                 funcs.SetList = function(self)
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then
                             v:Destroy()
                         end
                     end
                     for i,v in next, CreatList() do
                         funcs:AddOption(v)
                     end
                 end
 
                 funcs.RemoveOption = function(self,name)
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then
                             if v.Text == name then
                                 v:Destroy()
                             end
                         end
                     end
                 end
 
                 Arrow.MouseButton1Click:Connect(function()
                     if library.locked then return end
                     funcs:SetList()
                     opendd()
                 end)
                 return funcs
             end
 
             function Holder:MultiDropDown(name,options,callback)
                 local callback = callback or function() end
                 local flag = name
                 assert(name,"a name is required to create a dropdown")
 
                 local DropDown = Instance.new("TextButton")
                 local DropDownC = Instance.new("UICorner")
                 local Search = Instance.new("TextBox")
                 local SearchP = Instance.new("UIPadding")
                 local Arrow = Instance.new("ImageButton")
                 local DropDownHolder = Instance.new("Frame")
                 local OptionHolder = Instance.new("ScrollingFrame")
                 local OptionHolderL = Instance.new("UIListLayout")
                 local DDHC = Instance.new("UICorner")
 
                 DropDown.Name = "DropDown"
                 DropDown.Parent = Section
                 DropDown.BackgroundColor3 = theme.accent
                 DropDown.BorderSizePixel = 0
                 DropDown.ClipsDescendants = true
                 DropDown.Position = UDim2.new(0.0204359666, 0, 0.0790190771, 0)
                 DropDown.Size = UDim2.new(0, 352, 0, 33)
                 DropDown.AutoButtonColor = false
                 DropDown.Font = Enum.Font.GothamMedium
                 DropDown.Text = name
                 DropDown.TextColor3 = theme.textcolor
                 DropDown.TextSize = 13.000
                 DropDown.TextTransparency = 1
 
                 DropDownC.CornerRadius = UDim.new(0, 3)
                 DropDownC.Name = "DropDownC"
                 DropDownC.Parent = DropDown
 
                 Search.Name = "Search"
                 Search.Parent = DropDown
                 Search.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                 Search.BackgroundTransparency = 1.000
                 Search.BorderColor3 = Color3.fromRGB(27, 42, 53)
                 Search.BorderSizePixel = 0
                 Search.Size = UDim2.new(0, 304, 0, 33)
                 Search.Font = Enum.Font.GothamMedium
                 Search.Text = name
                 Search.TextColor3 = theme.textcolor
                 Search.TextSize = 13.000
                 Search.TextXAlignment = Enum.TextXAlignment.Left
 
                 SearchP.Name = "SearchP"
                 SearchP.Parent = Search
                 SearchP.PaddingLeft = UDim.new(0, 6)
 
                 Arrow.Name = "Arrow"
                 Arrow.Parent = DropDown
                 Arrow.BackgroundTransparency = 1.000
                 Arrow.BorderSizePixel = 0
                 Arrow.ClipsDescendants = true
                 Arrow.Position = UDim2.new(1.00139761, -28, 0.303030312, -9)
                 Arrow.Rotation = 90.000
                 Arrow.Size = UDim2.new(0, 23, 0, 31)
                 Arrow.ZIndex = 1
                 Arrow.Image = "rbxassetid://5012539403"
                 Arrow.SliceCenter = Rect.new(2, 2, 298, 298)
                 Arrow.ImageColor3 = theme.textcolor
 
                 DropDownHolder.Name = "DropDownHolder "..name
                 DropDownHolder.Parent = Section
                 DropDownHolder.BackgroundColor3 = Color3.fromRGB(36, 37, 41)
                 DropDownHolder.BorderSizePixel = 0
                 DropDownHolder.ClipsDescendants = true
                 DropDownHolder.Position = UDim2.new(0.0204359666, 0, 0.398406386, 0)
                 DropDownHolder.Size = UDim2.new(0, 352, 0, 0)
                 DropDownHolder.Visible = false
 
                 OptionHolder.Name = "OptionHolder"
                 OptionHolder.Parent = DropDownHolder
                 OptionHolder.Active = true
                 OptionHolder.BackgroundColor3 = Color3.fromRGB(36, 37, 41)
                 OptionHolder.BorderSizePixel = 0
                 OptionHolder.Position = UDim2.new(0, 0, 0.0413798429, 0)
                 OptionHolder.Size = UDim2.new(0, 351, 0, 146)
                 OptionHolder.CanvasSize = UDim2.new(0, 0, 0, 0)
                 OptionHolder.ScrollBarThickness = 0
 
                 OptionHolderL.Name = "OptionHolderL"
                 OptionHolderL.Parent = OptionHolder
                 OptionHolderL.HorizontalAlignment = Enum.HorizontalAlignment.Center
                 OptionHolderL.SortOrder = Enum.SortOrder.LayoutOrder
                 OptionHolderL.Padding = UDim.new(0, 5)
 
                 DDHC.CornerRadius = UDim.new(0, 3)
                 DDHC.Name = "DDHC"
                 DDHC.Parent = DropDownHolder
 
                 local selected = {}
                 local funcs = {}
 
                 Search:GetPropertyChangedSignal("Text"):connect(function()
                     Search.TextXAlignment = Search.TextFits and Enum.TextXAlignment.Left or Enum.TextXAlignment.Right
                 end)
 
                 local function showall()
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then 
                             v.Visible = true
                         end
                     end
                 end
                 
                 local function search(text)
                     if text == ""  then
                         showall()
                     end
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then
                             if v.Text:lower():match(text:lower()) then
                                 v.Visible = true
                             else
                                 v.Visible = false
                             end
                         end
                     end
                 end
 
                 local isopen = false
                 local function opendd()
                     isopen = not isopen
                     if isopen then
                         DropDownHolder.Visible = true
                     end
                     Arrow.Rotation = isopen and 0 or 90
                     DropDownHolder:TweenSize(UDim2.new(0, 352,0, (isopen and 153 or 0)),"Out","Sine",0.3,false)
                     task.wait(0.3)
                     if not isopen then
                         DropDownHolder.Visible = false
                     end
                 end
             
                 local IsSearching = false
                 Search.Focused:Connect(function()
                     showall()
                     IsSearching = true
                 end)
                 
                 Search:GetPropertyChangedSignal("Text"):Connect(function()
                     if not isopen then return end
                     if Search.Text == name then return end
                     if not IsSearching then return end
                     search(Search.Text)
                 end)
 
                 Arrow.MouseButton1Click:Connect(function()
                     showall()
                     opendd()
                 end)
 
                 OptionHolderL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                     OptionHolder.CanvasSize = UDim2.new(0, 0, 0, OptionHolderL.AbsoluteContentSize.Y + 10)
                 end)
 
                 local current
 
                 funcs.AddOption = function(self,text)
                     local Option = Instance.new("TextButton")
                     local BtnC = Instance.new("UICorner")
 
                     Option.Name = "Option"
                     Option.Parent = OptionHolder
                     Option.BackgroundColor3 = theme.accentsecondary
                     Option.BorderSizePixel = 0
                     Option.Position = UDim2.new(0.00997150969, 0, 0, 0)
                     Option.Size = UDim2.new(0, 344, 0, 31)
                     Option.AutoButtonColor = false
                     Option.Font = Enum.Font.GothamMedium
                     Option.Text = text
                     Option.TextColor3 = theme.textcolor
                     Option.TextSize = 13.000
 
                     BtnC.CornerRadius = UDim.new(0, 3)
                     BtnC.Name = "BtnC"
                     BtnC.Parent = Option
 
                     Option.MouseButton1Click:Connect(function()
                         if library.locked then return end
                         if not table.find(selected,Option.Text) then
                             table.insert(selected,Option.Text)
                             Option.TextColor3 = Color3.fromRGB(194, 149, 2)
                         elseif table.find(selected,Option.Text) then
                             Option.TextColor3 = Color3.fromRGB(225,225,225)
                             table.remove(selected,table.find(selected,Option.Text))
                         end
                         callback(selected)
                         library.flags[flag] = selected
                         if not selected[1] then
                             Search.Text = name
                             return
                         end
                         Search.Text = "Selected: "
                         for i,v in next, selected do
                             if i == 1 then
                                 Search.Text = Search.Text..v
                             else
                                 Search.Text = Search.Text..", "..v
                             end
                         end
                         showall()
                         IsSearching = false
                     end)
                 end
 
                 funcs.SetList = function(self,options)
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then
                             v:Destroy()
                         end
                     end
                     for i,v in next, options do
                         funcs:AddOption(v)
                     end
                 end
 
                 funcs.RemoveOption = function(self,name)
                     for i,v in next, OptionHolder:GetChildren() do
                         if v:IsA("TextButton") and v.Name == "Option" then
                             if v.Text == name then
                                 v:Destroy()
                             end
                         end
                     end
                 end
                 funcs:SetList(options)
                 return funcs
             end
 
             function Holder:Separator()
                 local SplitBack = Instance.new("Frame")
                 local BtnC = Instance.new("UICorner")
                 local SplitBar = Instance.new("TextButton")
                 local BtnC_2 = Instance.new("UICorner")
 
                 SplitBack.Name = "SplitBack"
                 SplitBack.Parent = Section
                 SplitBack.BackgroundColor3 = theme.accent
                 SplitBack.BackgroundTransparency = 1.000
                 SplitBack.BorderSizePixel = 0
                 SplitBack.Position = UDim2.new(0.0204359666, 0, 0.405046493, 0)
                 SplitBack.Size = UDim2.new(0, 352, 0, 17)
 
                 BtnC.CornerRadius = UDim.new(0, 3)
                 BtnC.Name = "BtnC"
                 BtnC.Parent = SplitBack
 
                 SplitBar.Name = "SplitBar"
                 SplitBar.Parent = SplitBack
                 SplitBar.BackgroundColor3 = Color3.fromRGB(36, 37, 40)
                 SplitBar.BorderSizePixel = 0
                 SplitBar.Position = UDim2.new(0, 0, 0.405047238, 0)
                 SplitBar.Size = UDim2.new(0, 352, 0, 5)
                 SplitBar.AutoButtonColor = false
                 SplitBar.Font = Enum.Font.GothamMedium
                 SplitBar.Text = ""
                 SplitBar.TextColor3 = Color3.fromRGB(255, 255, 255)
                 SplitBar.TextSize = 13.000
 
                 BtnC_2.CornerRadius = UDim.new(0, 3)
                 BtnC_2.Name = "BtnC"
                 BtnC_2.Parent = SplitBar
             end
 
             function Holder:ColorPicker(name,default,callback)
                 local callback = callback or function() end
                 local flag = name
                 local default = default or Color3.fromRGB(225,225,225)
                 assert(name,"a name is required to create a color picker")
 
                 local ColorPicker = Instance.new("TextButton")
                 local ColorPickerC = Instance.new("UICorner")
                 local SelectedColor = Instance.new("TextButton")
                 local SelectedColorC = Instance.new("UICorner")
 
                 ColorPicker.Name = "ColorPicker"
                 ColorPicker.Parent = Section
                 ColorPicker.BackgroundColor3 = theme.accent
                 ColorPicker.BorderSizePixel = 0
                 ColorPicker.Position = UDim2.new(0.0204359666, 0, 0.0790190771, 0)
                 ColorPicker.Size = UDim2.new(0, 352, 0, 33)
                 ColorPicker.AutoButtonColor = false
                 ColorPicker.Font = Enum.Font.GothamMedium
                 ColorPicker.Text = "  "..name
                 ColorPicker.TextColor3 = theme.textcolor
                 ColorPicker.TextSize = 13.000
                 ColorPicker.TextXAlignment = Enum.TextXAlignment.Left
 
                 ColorPickerC.CornerRadius = UDim.new(0, 3)
                 ColorPickerC.Name = "ColorPickerC"
                 ColorPickerC.Parent = ColorPicker
 
                 SelectedColor.Name = "SelectedColor"
                 SelectedColor.Parent = ColorPicker
                 SelectedColor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                 SelectedColor.BorderSizePixel = 0
                 SelectedColor.Position = UDim2.new(0.81645447, 0, 0.200302571, 0)
                 SelectedColor.Size = UDim2.new(0, 54, 0, 18)
                 SelectedColor.ZIndex = 3
                 SelectedColor.AutoButtonColor = false
                 SelectedColor.Font = Enum.Font.GothamMedium
                 SelectedColor.Text = ""
                 SelectedColor.TextColor3 = default
                 SelectedColor.TextSize = 12.000
 
                 SelectedColorC.CornerRadius = UDim.new(0, 4)
                 SelectedColorC.Name = "SelectedColorC"
                 SelectedColorC.Parent = SelectedColor
 
                 --~ColorPickerFrame~--
 
                 local ColorPickerFrame = Instance.new("Frame")
                 local CPFC = Instance.new("UICorner")
                 local SubmitBtn = Instance.new("TextButton")
                 local ButtonUICorner = Instance.new("UICorner")
                 local InputR = Instance.new("TextBox")
                 local IGNORE = Instance.new("UICorner")
                 local InputG = Instance.new("TextBox")
                 local IGNORE_2 = Instance.new("UICorner")
                 local InputB = Instance.new("TextBox")
                 local IGNORE_3 = Instance.new("UICorner")
                 local saturation = Instance.new("ImageLabel")
                 local IGNORE_4 = Instance.new("UICorner")
                 local saturationpicker = Instance.new("Frame")
                 local IGNORE_5 = Instance.new("UICorner")
                 local outline = Instance.new("Frame")
                 local IGNORE_6 = Instance.new("UICorner")
                 local huef = Instance.new("ImageLabel")
                 local IGNORE_7 = Instance.new("UICorner")
                 local huepicker = Instance.new("Frame")
                 local Title = Instance.new("TextLabel")
 
                 ColorPickerFrame.Name = "ColorPickerFrame"
                 ColorPickerFrame.Parent = Main
                 ColorPickerFrame.BackgroundColor3 = theme.main
                 ColorPickerFrame.BorderColor3 = Color3.fromRGB(42, 42, 42)
                 ColorPickerFrame.BorderSizePixel = 0
                 ColorPickerFrame.Position = UDim2.new(1.01471806, 0, 0.23381938, 0)
                 ColorPickerFrame.Size = UDim2.new(0, 208, 0, 197)
                 ColorPickerFrame.Visible = false
 
                 CPFC.CornerRadius = UDim.new(0, 5)
                 CPFC.Name = "CPFC"
                 CPFC.Parent = ColorPickerFrame
 
                 SubmitBtn.Name = "SubmitBtn"
                 SubmitBtn.Parent = ColorPickerFrame
                 SubmitBtn.BackgroundColor3 = theme.accent
                 SubmitBtn.BorderSizePixel = 0
                 SubmitBtn.Position = UDim2.new(0.057692308, 0, 0.838497579, 0)
                 SubmitBtn.Size = UDim2.new(0, 189, 0, 24)
                 SubmitBtn.AutoButtonColor = false
                 SubmitBtn.Font = Enum.Font.Gotham
                 SubmitBtn.Text = "Submit"
                 SubmitBtn.TextColor3 = theme.textcolor
                 SubmitBtn.TextSize = 12.000
 
                 ButtonUICorner.CornerRadius = UDim.new(0, 3)
                 ButtonUICorner.Name = "ButtonUICorner"
                 ButtonUICorner.Parent = SubmitBtn
 
                 InputR.Name = "InputR"
                 InputR.Parent = ColorPickerFrame
                 InputR.BackgroundColor3 = theme.accent
                 InputR.ClipsDescendants = true
                 InputR.Position = UDim2.new(0.0192307699, 8, 0.852791846, -24)
                 InputR.Size = UDim2.new(0, 58, 0, 16)
                 InputR.ZIndex = 4
                 InputR.Font = Enum.Font.GothamMedium
                 InputR.PlaceholderText = "R"
                 InputR.Text = ""
                 InputR.TextColor3 = theme.textcolor
                 InputR.TextSize = 11.000
 
                 IGNORE.CornerRadius = UDim.new(0, 4)
                 IGNORE.Name = "IGNORE"
                 IGNORE.Parent = InputR
 
                 InputG.Name = "InputG"
                 InputG.Parent = ColorPickerFrame
                 InputG.BackgroundColor3 = theme.accent
                 InputG.ClipsDescendants = true
                 InputG.Position = UDim2.new(0.0544230789, 66, 0.85307616, -24)
                 InputG.Size = UDim2.new(0, 58, 0, 16)
                 InputG.ZIndex = 4
                 InputG.Font = Enum.Font.GothamMedium
                 InputG.PlaceholderText = "G"
                 InputG.Text = ""
                 InputG.TextColor3 = theme.textcolor
                 InputG.TextSize = 11.000
 
                 IGNORE_2.CornerRadius = UDim.new(0, 4)
                 IGNORE_2.Name = "IGNORE"
                 IGNORE_2.Parent = InputG
 
                 InputB.Name = "InputB"
                 InputB.Parent = ColorPickerFrame
                 InputB.BackgroundColor3 = theme.accent
                 InputB.ClipsDescendants = true
                 InputB.Position = UDim2.new(0.0913461521, 124, 0.852791905, -24)
                 InputB.Size = UDim2.new(0, 58, 0, 16)
                 InputB.ZIndex = 4
                 InputB.Font = Enum.Font.GothamMedium
                 InputB.PlaceholderText = "B"
                 InputB.Text = ""
                 InputB.TextColor3 = theme.textcolor
                 InputB.TextSize = 11.000
 
                 IGNORE_3.CornerRadius = UDim.new(0, 4)
                 IGNORE_3.Name = "IGNORE"
                 IGNORE_3.Parent = InputB
 
                 saturation.Name = "saturation"
                 saturation.Parent = ColorPickerFrame
                 saturation.BackgroundColor3 = Color3.fromRGB(255, 0, 4)
                 saturation.Position = UDim2.new(0, 12, 0, 29)
                 saturation.Size = UDim2.new(0, 158, 0, 105)
                 saturation.ZIndex = 2
                 saturation.Image = "rbxassetid://8630797271"
 
                 IGNORE_4.CornerRadius = UDim.new(0, 4)
                 IGNORE_4.Name = "IGNORE"
                 IGNORE_4.Parent = saturation
 
                 saturationpicker.Name = "saturationpicker"
                 saturationpicker.Parent = saturation
                 saturationpicker.BackgroundColor3 = theme.textcolor
                 saturationpicker.BorderColor3 = Color3.fromRGB(0, 0, 0)
                 saturationpicker.Position = UDim2.new(0, 20, 0, 20)
                 saturationpicker.Size = UDim2.new(0, 4, 0, 4)
 
                 IGNORE_5.CornerRadius = UDim.new(0, 12)
                 IGNORE_5.Name = "IGNORE"
                 IGNORE_5.Parent = saturationpicker
 
                 outline.Name = "outline"
                 outline.Parent = saturationpicker
                 outline.BackgroundColor3 = theme.textcolor
                 outline.BorderColor3 = Color3.fromRGB(225, 225, 225)
                 outline.Position = UDim2.new(0, -1, 0, -1)
                 outline.Size = UDim2.new(0, 6, 0, 6)
                 outline.ZIndex = 0
 
                 IGNORE_6.CornerRadius = UDim.new(0, 12)
                 IGNORE_6.Name = "IGNORE"
                 IGNORE_6.Parent = outline
 
                 huef.Name = "huef"
                 huef.Parent = ColorPickerFrame
                 huef.BackgroundColor3 = Color3.fromRGB(255, 0, 4)
                 huef.BackgroundTransparency = 1.000
                 huef.Position = UDim2.new(0.966346145, -24, 0.00137298123, 30)
                 huef.Size = UDim2.new(0, 16, 0, 104)
                 huef.Image = "rbxassetid://8630799159"
                 huef.ScaleType = Enum.ScaleType.Crop
 
                 IGNORE_7.CornerRadius = UDim.new(0, 4)
                 IGNORE_7.Name = "IGNORE"
                 IGNORE_7.Parent = huef
 
                 huepicker.Name = "huepicker"
                 huepicker.Parent = huef
                 huepicker.BackgroundColor3 = theme.textcolor
                 huepicker.Position = UDim2.new(0, 0, 0, 20)
                 huepicker.Size = UDim2.new(1, 0, 0, 2)
 
                 Title.Name = "Title"
                 Title.Parent = ColorPickerFrame
                 Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                 Title.BackgroundTransparency = 1.000
                 Title.Position = UDim2.new(0, 0, 0.0253807101, 0)
                 Title.Size = UDim2.new(0, 208, 0, 17)
                 Title.Font = Enum.Font.GothamBold
                 Title.Text = "   "..name
                 Title.TextColor3 = theme.textcolor
                 Title.TextSize = 14.000
                 Title.TextXAlignment = Enum.TextXAlignment.Left
 
                 local isopen = false
                 local function openpicker()
                     isopen = not isopen
                     ColorPickerFrame.Visible = isopen and true or false
                 end
 
                 SelectedColor.MouseButton1Click:Connect(function()
                     if library.locked then return end
                     openpicker()
                 end)
 
                 SubmitBtn.MouseButton1Click:Connect(function()
                     openpicker()
                 end)
 
                 local hue, sat, val = default:ToHSV()
                 local slidingHue = false
                 local slidingSaturation = false
                 local hsv = Color3.fromHSV(hue, sat, val)
 
                 local function updatehue(input)
                     local sizeY = 1 - math.clamp((input.Position.Y - huef.AbsolutePosition.Y) / huef.AbsoluteSize.Y, 0, 1)
                     local posY = math.clamp(((input.Position.Y - huef.AbsolutePosition.Y) / huef.AbsoluteSize.Y) * huef.AbsoluteSize.Y, 0, huef.AbsoluteSize.Y - 2)
                     huepicker.Position = UDim2.new(0, 0, 0, posY)
 
                     hue = sizeY
                     hsv = Color3.fromHSV(sizeY, sat, val)
 
                     InputR.Text = "R: "..math.clamp(math.floor(hsv.R * 255), 0, 255)
                     InputG.Text = "G: "..math.clamp(math.floor(hsv.G * 255), 0, 255)
                     InputB.Text = "B: "..math.clamp(math.floor(hsv.B * 255), 0, 255)
 
                     saturation.BackgroundColor3 = hsv
                     SelectedColor.BackgroundColor3 = hsv
                     library.flags[flag] = Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255)
                     callback(Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255))	
                 end
 
                 huef.InputBegan:Connect(function(input)
                     if input.UserInputType == Enum.UserInputType.MouseButton1 then
                         slidingHue = true
                         updatehue(input)
                     end
                 end)
 
                 huef.InputEnded:Connect(function(input)
                     if input.UserInputType == Enum.UserInputType.MouseButton1 then
                         slidingHue = false
                     end
                 end)
 
                 game.UserInputService.InputChanged:Connect(function(input)
                     if input.UserInputType == Enum.UserInputType.MouseMovement then
                         if slidingHue then
                             updatehue(input)
                         end
                     end
                 end)
 
                 local function updatesatval(input)
                     local sizeX = math.clamp((input.Position.X - saturation.AbsolutePosition.X) / saturation.AbsoluteSize.X, 0, 1)
                     local sizeY = 1 - math.clamp((input.Position.Y - saturation.AbsolutePosition.Y) / saturation.AbsoluteSize.Y, 0, 1)
                     local posY = math.clamp(((input.Position.Y - saturation.AbsolutePosition.Y) / saturation.AbsoluteSize.Y) * saturation.AbsoluteSize.Y, 0, saturation.AbsoluteSize.Y - 4)
                     local posX = math.clamp(((input.Position.X - saturation.AbsolutePosition.X) / saturation.AbsoluteSize.X) * saturation.AbsoluteSize.X, 0, saturation.AbsoluteSize.X - 4)
 
                     saturationpicker.Position = UDim2.new(0, posX, 0, posY)
 
                     sat = sizeX
                     val = sizeY
                     hsv = Color3.fromHSV(hue, sizeX, sizeY)
 
                     InputR.Text = "R: "..math.clamp(math.floor(hsv.R * 255), 0, 255)
                     InputG.Text = "G: "..math.clamp(math.floor(hsv.G * 255), 0, 255)
                     InputB.Text = "B: "..math.clamp(math.floor(hsv.B * 255), 0, 255)
 
                     SelectedColor.BackgroundColor3 = hsv
 
                     library.flags[flag] = Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255)
                     callback(Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255))	
                 end
 
                 saturation.InputBegan:Connect(function(input)
                     if input.UserInputType == Enum.UserInputType.MouseButton1 then
                         slidingSaturation = true
                         updatesatval(input)
                     end
                 end)
 
                 saturation.InputEnded:Connect(function(input)
                     if input.UserInputType == Enum.UserInputType.MouseButton1 then
                         slidingSaturation = false
                     end
                 end)
 
                 game.UserInputService.InputChanged:Connect(function(input)
                     if input.UserInputType == Enum.UserInputType.MouseMovement then
                         if slidingSaturation then
                             updatesatval(input)
                         end
                     end
                 end)
 
                 local function set(color)
                     if type(color) == "table" then
                         color = Color3.fromRGB(unpack(color))
                     end
 
                     hue, sat, val = color:ToHSV()
                     hsv = Color3.fromHSV(hue, sat, val)
 
                     SelectedColor.BackgroundColor3 = hsv
                     saturation.BackgroundColor3 = hsv
                     saturationpicker.Position = UDim2.new(0, (math.clamp(sat * saturation.AbsoluteSize.X, 0, saturation.AbsoluteSize.X - 4)), 0, (math.clamp((1 - val) * saturation.AbsoluteSize.Y, 0, saturation.AbsoluteSize.Y - 4)))
                     huepicker.Position = UDim2.new(0, 0, 0, math.clamp((1 - hue) * saturation.AbsoluteSize.Y, 0, saturation.AbsoluteSize.Y - 4))
 
                     InputR.Text = "R: "..math.clamp(math.floor(hsv.R * 255), 0, 255)
                     InputG.Text = "G: "..math.clamp(math.floor(hsv.G * 255), 0, 255)
                     InputB.Text = "B: "..math.clamp(math.floor(hsv.B * 255), 0, 255)
                     library.flags[flag] = Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255)
                     callback(Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255))
                 end
 
                 set(default)
 
                 local funcs = {}
 
                 funcs.SetColor = function(self,color)
                     set(color)
                 end
                 return funcs
             end
             return Holder
         end
         return section
     end
     return tab
 end
 --#endregion

 --#region Variables
  local Players = game:GetService("Players")
  local Player = Players.LocalPlayer
  local Mouse = Player:GetMouse()
 
  local Clicked
 
  local LandArtClick
  local LandArtMove
  
  local Nspeed = 16
  local NSspeed = 65
 
  local Flyingkey
  local FlyingEnabled = false
  local maxspeed = 150
  
  local RunService = game:GetService("RunService")
  local UserInputService = game:GetService("UserInputService")
  local Camera = game.Workspace.CurrentCamera
  local lighting = game:GetService("Lighting")
 
  local ClickSelection
  local ClickToSelect
  
  local preMaxZoom = Player.CameraMaxZoomDistance
  local preMinZoom = Player.CameraMinZoomDistance
  
  local MainPart
  local sortbox
  local RRSort = 0
  
  local BestCooldown, BestAxe, BestValue, NumberTohit = 0
 
  local StackerLength, StackerHeight, StackerWidth

  local WoodCam
  local Woodui

  if game.workspace:FindFirstChild("Preview") then
    game.workspace.Preview:Destroy()
end

local PreviewF = Instance.new('Folder')
PreviewF.Parent = game.workspace
PreviewF.Name = 'Preview'

if not getgenv().ButterRan then

if game.CoreGui:FindFirstChild("LoadGui") then 
   game.CoreGui.LoadGui:Destroy()
end

-- Butter Can load Gui
local ScreenGui = Instance.new("ScreenGui") local Frame = Instance.new("Frame") local TextLabel = Instance.new("TextLabel") local UICorner = Instance.new("UICorner") ScreenGui.Parent = game.CoreGui ScreenGui.Name = "LoadGui" Frame.Parent = ScreenGui Frame.AnchorPoint = Vector2.new(0, 1) Frame.BackgroundColor3 = theme.main Frame.BorderColor3 = Color3.fromRGB(0, 0, 0) Frame.BorderSizePixel = 0 Frame.Position = UDim2.new(0, -8, 1, 4) Frame.Size = UDim2.new(0, 100, 0, 34) TextLabel.Parent = Frame TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255) TextLabel.BackgroundTransparency = 1.000 TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0) TextLabel.BorderSizePixel = 0 TextLabel.Position = UDim2.new(0, -38, 0, -8) TextLabel.Size = UDim2.new(0, 176, 0, 54) TextLabel.Font = Enum.Font.LuckiestGuy TextLabel.Text = "Can load" TextLabel.TextColor3 = theme.lightcontrast TextLabel.TextSize = 17.000 TextLabel.TextWrapped = true UICorner.Parent = Frame 

end

-- Lasso Stuff
pcall(function() if game.CoreGui.LassoUI then game.CoreGui.LassoUI:Destroy() end end)

local ScreenGui = Instance.new("ScreenGui") local Frame = Instance.new("Frame") ScreenGui.Name = "LassoUI" ScreenGui.Parent = game.CoreGui ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling Frame.Parent = ScreenGui Frame.BackgroundColor3 = Color3.new(0.500, 0.500, 0.500) Frame.BackgroundTransparency = 0.5 Frame.BorderColor3 = Color3.new(5, 1, 0) Frame.BorderSizePixel = 1.5 Frame.Position = UDim2.new(0, 0, 0, 0) Frame.Size = UDim2.new(0, 0, 0, 0)
--

isnetworkowner = newcclosure(function(part) return part.ReceiveAge == 0 end)

function GetPing(ValNumb)
   local Time = tick()
   game:GetService("ReplicatedStorage").TestPing:InvokeServer()
   return ValNumb and (((tick() - Time) / 2) + ValNumb) or 0.25
end

function FixNames()
    for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
        if v.Name == "Model" and v:FindFirstChild("ItemName") then
            v.Name = v.ItemName.Value
        end
    end
end

function calculateHitsForEndPart(part)
    return math.round((math.sqrt(part.Size.X * part.Size.Z) ^ 2 * 8e7) / 1e7)
end

function GetLava()
    local Lava = game.workspace['Region_Volcano']:GetChildren()
    for i = 1, #Lava do
        local Lava = Lava[i]
        if Lava:FindFirstChild('Lava') and Lava.Lava.CFrame == CFrame.new(-1675.2002, 255.002533, 1284.19983, 0.866007268, 0, 0.500031412, 0, 1, 0, -0.500031412, 0, 0.866007268) then
            Lava.Lava.Size = Vector3.new(0.5, 0.5, 0.5)
            return Lava
        end
    end
end

function PickUpTool(Axe)
    for i, v in pairs(game.workspace.PlayerModels:GetDescendants()) do        if Axe == "Rukiryaxe" then            oldpos = Player.Character.HumanoidRootPart.CFrame            if v.Name == "Model" and v:FindFirstChild("Owner") and v:FindFirstChild("Main") then                if v:FindFirstChild("ToolName") and v.ToolName.Value == Axe and v.Main:FindFirstChild("PointLight") then                    print(v)                    Player.Character.HumanoidRootPart.CFrame = v.Main.CFrame                    for i = 1,10 do                        game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)                        task.wait(0.1)                        game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(v, "Pick up tool")                    end                end            end            Player.Character.HumanoidRootPart.CFrame = oldpos        else            if v.Name == "Model" and v:FindFirstChild("Owner") then                if v:FindFirstChild("ToolName") and v.ToolName.Value == Axe then                    game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(v, "Pick up tool")                end            end        end    end 
end

local Executor = identifyexecutor() 
if Executor:find("Synapse") then
   --getgenv().Synapse = true
   --print("Can teleport fast!")
end


 
 --#endregion

  --#region Config
  local HttpService = game:GetService("HttpService")
  local ConfigData = {}
  
  local function setDefault(configTable, key, defaultValue)
      if configTable[key] == nil then
          configTable[key] = defaultValue
      end
  end
  
  local configsuccess, result = pcall(function()
      if readfile then
          ConfigData = HttpService:JSONDecode(readfile("ButterV3.lua"))
      end
  end)
  
 
  setDefault(ConfigData, "Fly", true)
  setDefault(ConfigData, "FlyKey", "Q")
  setDefault(ConfigData, "FlySpeed", 150)
  setDefault(ConfigData, "HardDragger", false)
 
  
  setDefault(ConfigData, "HideUI", "RightShift")
 
 
  --#region Config Functions
  if writefile and isfile and delfile then
      if configsuccess then
          print("Configuration loaded successfully.")
      else
          print("Configuration file error. Fixing...")
          if isfile("ButterV3.lua") then
              delfile("ButterV3.lua")
          end
          task.wait()
          writefile("ButterV3.lua", HttpService:JSONEncode(ConfigData))
      end
  else
      print("Unable to load config, exploit not supported")
  end
  
  local function SaveSettings()
      if writefile then
          writefile("ButterV3.lua", HttpService:JSONEncode(ConfigData))
      end
  end
  
  SaveSettings()
  
 --#endregion
 
 --#endregion

 --#region Basic Autobuy Functions
  
 local ShopIDS = { -- Shop IDs Needed for remote
     ["WoodRUs"] = 7,
     ["FurnitureStore"] = 8,
     ["FineArt"] = 11,
     ["CarStore"] = 9,
     ["LogicStore"] = 12,
     ["ShackShop"] = 10
 }
 
 local storeNames = { -- Renames all the shops Items
     BasicHatchet = "WoodRUs",
     Dynamite = "ShackShop",
     Seat_Couch = "FurnitureStore",
     Pickup1 = "CarStore",
     Painting6 = "FineArt",
     NeonWireRed = "LogicStore"
 }
 
 for i, v in pairs(game.Workspace.Stores:GetDescendants()) do -- Renames it all here
     if v.Name == "BoxItemName" and storeNames[v.Value] then
         v.Parent.Parent.Name = storeNames[v.Value]
 end
 end
 
 function GetPrice(Item, Amount) -- Gets the price of an Item + Quantity
    local Price = 0
    
    for i, v in ipairs(game:GetService("ReplicatedStorage").ClientItemInfo:GetChildren()) do
        if v.Name == Item and v:FindFirstChild("Price") then
            Price = Price + v.Price.Value * Amount
        end
    end
    
    return Price
end

 
 function Pay(ID) -- Remote that we need to fire to buy stuff
     spawn(function()
         game:GetService("ReplicatedStorage").NPCDialog.PlayerChatted:InvokeServer(
             {
                 ["ID"] = ID,
                 ["Character"] = "name",
                 ["Name"] = "name",
                 ["Dialog"] = 'Dialog'
             }, "ConfirmPurchase");
     end)
 end
 
 function GetCounter(Item) -- Get's the closest counter to you
     ClosestCounter = nil
     for i, v in next, game.Workspace.Stores:GetChildren() do
         for i, v in next, v:GetChildren() do
             if v.Name:lower() == "counter" then
                 if (Item.CFrame.p - v.CFrame.p).Magnitude <= 200 then
                     ClosestCounter = v
                 end
             end
         end
     end
     return ClosestCounter
 end
 
 function UpdateNames()
     for i, v in next, game.Workspace.Stores:GetChildren() do
         if v.Name == "WoodRUs" or v.Name == "ShackShop" or v.Name ==
             "FurnitureStore" or v.Name == "CarStore" or v.Name == "FineArt" or
             v.Name == "LogicStore" then
             v.ChildAdded:Connect(function(v)
                 v.Name = v:WaitForChild("BoxItemName").Value
             end)
             for i, v in next, v:GetChildren() do
                 if v:FindFirstChild("Owner") and v.Owner.Value == nil then
                     if v:FindFirstChild("BoxItemName") then
                         v.Name = v.BoxItemName.Value
                     end
                 end
             end
         end
     end
 end
 
 UpdateNames()
 
 function ItemPath(Item)
     for i, v in next, game.Workspace.Stores:GetChildren() do
         if v.Name == "WoodRUs" or v.Name == "ShackShop" or v.Name ==
             "FurnitureStore" or v.Name == "CarStore" or v.Name == "FineArt" or
             v.Name == "LogicStore" then
             for i, v in next, v:GetChildren() do
                 if v:FindFirstChild("Owner") and v.Owner.Value == nil then
                     if v:FindFirstChild("BoxItemName") and
                         tostring(v.BoxItemName.Value) == Item then
                         return v.Parent
                     end
                 end
             end
         end
     end
 end

function GrabShopItems()
    local ItemList = {}
    for i, v in next, game.Workspace.Stores:GetChildren() do
        if v.Name == "WoodRUs" or v.Name == "ShackShop" or v.Name ==
             "FurnitureStore" or v.Name == "CarStore" or v.Name == "FineArt" or
             v.Name == "LogicStore" then
            for i, v in next, v:GetChildren() do
                if v:FindFirstChild("Type") and v.Type.Value ~= "Blueprint" and v:FindFirstChild("BoxItemName") then
                    if not table.find(ItemList, v.BoxItemName.Value .. " - $" .. GetPrice(v.BoxItemName.Value, 1)) then
                        table.insert(ItemList, v.BoxItemName.Value .. " - $" .. GetPrice(v.BoxItemName.Value, 1))
                    end
                end
            end
        end
        table.sort(ItemList)
    end
    return ItemList
end
 
 function AutoBuy(Item, Amount, OpenBox, Rukiry)
    if Player.leaderstats.Money.Value < GetPrice(ItemToBuy, Amount) then return library:Notify("Butter!","Not enough money to proceed with procedure you need $" .. tostring(GetPrice(ItemToBuy, Amount)),3) end
     local OldPos = Player.Character.HumanoidRootPart.CFrame
     local Path = ItemPath(Item)
 
     for i = 1, Amount do
         if AbortAutoBuy then break end
 
         local Item = Path:WaitForChild(Item)
 
         local Counter = GetCounter(Item.Main)
 
         Player.Character.HumanoidRootPart.CFrame = Item.Main.CFrame * CFrame.new(2, 2, 0);

         if getgenv().Synapse then 
         task.wait(GetPing(0.03))
         else
         task.wait(GetPing())
         end

         OldColor = Item.Main.Color

         if getgenv().Synapse then 
         while not isnetworkowner(Item.Main) do  -- get network ownership
            Item.Main.Color = Color3.fromRGB(0, 255, 0)
            game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)
            task.wait()
         end
         else
            for i = 1, 20 do
                Item.Main.Color = Color3.fromRGB(0, 255, 0)
                game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)
                task.wait()
            end
         end

         Item.Main.Color = OldColor


         if getgenv().Synapse then 
         game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)

         Item.Main:PivotTo(Counter.CFrame + Vector3.new(0, Item.Main.Size.Y, 0.5, 0))
         task.wait(GetPing(0.1))
         else

            if isnetworkowner(Item.Main) then
                Item.Main:PivotTo(Counter.CFrame + Vector3.new(0, Item.Main.Size.Y, 0.5, 0))
            else
                game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)
                Item.Main:PivotTo(Counter.CFrame + Vector3.new(0, Item.Main.Size.Y, 0.5, 0))
            end
            task.wait(GetPing())
         end
 
         Player.Character.HumanoidRootPart.CFrame = Counter.CFrame + Vector3.new(5, 0, 5)
 
         repeat
             Pay(ShopIDS[Item.Parent.Name])
             task.wait()
         until Item.Parent == game.Workspace.PlayerModels
 
         if Rukiry then if tostring(Item.PurchasedBoxItemName.Value) == "BagOfSand" then Item.Main.CFrame = CFrame.new(319, 43, 1914) elseif tostring(Item.PurchasedBoxItemName.Value) == "CanOfWorms" then Item.Main.CFrame = CFrame.new(317, 43, 1918) elseif tostring(Item.PurchasedBoxItemName.Value) == "LightBulb" then Item.Main.CFrame = CFrame.new(322, 43, 1916) end 
            else 
                
                if getgenv().Synapse then 
                while not isnetworkowner(Item.Main) do  -- get network ownership
                    game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)
                    task.wait()
                 end

                game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(Item)
                end

                Item.Main:PivotTo(OldPos)

                if getgenv().Synapse then task.wait(GetPing(0.1)) else task.wait(GetPing()) end

        end
 
         if OpenBox then wait(0.2) game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(Item, "Open box") end
 
         print(i)
         wait()
     end
     Player.Character.HumanoidRootPart.CFrame = OldPos + Vector3.new(5, 0, 5)
 end
 
  
  --AutoBuy("GlassPane4",1,false,false)
  
  -- #endregion

  --#region Get Tree
 function getBestAxeNoRequire(hasAxe)
    BestCooldown, BestAxe, BestValue = 0, nil, 0

    local Hitpoints = { ["BasicHatchet"] = 0.2, ["EndTimesAxe"] = 1.58, ["IceAxe"] = 0.36, ["CandyCornAxe"] = 1.75, ["CaveAxe"] = 0.4, ["RustyAxe"] = 0.55, ["AxeTwitter"] = 1.65, ["ManyAxe"] = 10.2, ["GingerbreadAxe"] = 1.2, ["AxeAmber"] = 3.39,  ["Beesaxe"] = 1.4, ['Axe1'] = 0.55, ['Axe2'] = 0.93, ['Axe3'] = 1.45, ["CandyCaneAxe"] = 0, ["AxeChicken"] = 0.9, ["AxeSwamp"] = 0.8, ["SilverAxe"] = 1.6,  ["FireAxe"] = 0.6, ["AxeBetaTesters"] = 1.45, ["Rukiryaxe"] = 1.68, ["AxeAlphaTesters"] = 1.5, ["BluesteelAxe"] = 2.8,}

    local Axes = {"BasicHatchet", "EndTimesAxe", "IceAxe", "CandyCornAxe", "CaveAxe", "RustyAxe", "AxeTwitter", "ManyAxe", "GingerbreadAxe", "AxeAmber", "Beesaxe", "Axe1", "Axe2", "Axe3", "CandyCaneAxe", "AxeChicken", "AxeSwamp", "SilverAxe", "FireAxe", "AxeBetaTesters", "Rukiryaxe", "AxeAlphaTesters", "BluesteelAxe", }

    local Cooldown = { ["BasicHatchet"] = 0.65, ["EndTimesAxe"] = 0.4, ["CandyCornAxe"] = 0.6, ["IceAxe"] = 0.4, ["CaveAxe"] = 0.4, ["RustyAxe"] = 0.4, ["AxeTwitter"] = 0.4, ["ManyAxe"] = 1.9, ["GingerbreadAxe"] = 0.5, ["AxeAmber"] = 1, ["Beesaxe"] = 0.5, ['Axe1'] = 0.55, ['Axe2'] = 0.93, ['Axe3'] = 1.45, ["CandyCaneAxe"] = 0.7, ["AxeChicken"] = 0.3, ["AxeSwamp"] = 0.55, ["SilverAxe"] = 0.48, ["FireAxe"] = 0.55, ["AxeBetaTesters"] = 0.54, ["Rukiryaxe"] = 0.4, ["AxeAlphaTesters"] = 0.5, ["BluesteelAxe"] = 0.8, }

    local foundAxe = false

    for i, v in pairs(Player.Backpack:GetChildren()) do
        if v:FindFirstChild("ToolName") and table.find(Axes, tostring(v.ToolName.Value)) then
            foundAxe = true
            if Hitpoints[tostring(v.ToolName.Value)] > BestValue then
                BestValue = Hitpoints[tostring(v.ToolName.Value)]
                BestAxe = v
                BestCooldown = Cooldown[tostring(v.ToolName.Value)]
            end
        end
    end

    if Player.Character:FindFirstChildOfClass("Tool") then
        local axe = Player.Character:FindFirstChildOfClass("Tool")
        if axe:FindFirstChild("ToolName") and table.find(Axes, tostring(axe.ToolName.Value)) then
            foundAxe = true
            if Hitpoints[tostring(axe.ToolName.Value)] > BestValue then
                BestValue = Hitpoints[tostring(axe.ToolName.Value)]
                BestAxe = axe
                BestCooldown = Cooldown[tostring(axe.ToolName.Value)]
            end
        end
    end

    if not foundAxe then
        return library:Notify("Butter!","You need an axe for this Procedure!",3)
    end

    if hasAxe then
        if Player.Character:FindFirstChild("Tool") then
            Player.Character.Humanoid:UnequipTools()
        end
        for i, v in pairs(Player.Backpack:GetChildren()) do
            if v:FindFirstChild("ToolName") and v.ToolName.Value == hasAxe then
                return true
            end
        end
    end

    return { BestAxe, BestCooldown, BestValue }
end

 
 function treeCutNoRequire(type, amt)
     local tree = type
     local treeAmt = amt
     local treesCut = 0
     local BestValue = 0
     local BestAxe
     local treeToTp = nil
     local OldCF = Player.Character.HumanoidRootPart.CFrame
 
     local function tp(CFrame)
         pcall(function() Player.Character.HumanoidRootPart.CFrame = CFrame end)
     end
     local woodHook
 
     woodHook = game.Workspace.LogModels.ChildAdded:Connect(function(v)
         if v.Name == "Loose_" .. tree and v:WaitForChild("Owner").Value == Player then
             treeToTp = v
         end
     end)
 
     local best = getBestAxeNoRequire()
 
     BestAxe = best[1]
     BestCooldown = best[2]
     BestValue = best[3]
 
     if BestAxe.ToolName.Value == "FireAxe" and tree == "Volcano" then        BestValue = 6.35        BestCooldown = 0.35    elseif BestAxe.ToolName.Value == "EndTimesAxe" and tree == "LoneCave" then        BestValue = 10000000        BestCooldown = 0.3    elseif BestAxe.ToolName.Value == "AxeSwamp" and tree == "GreenSwampy" then        BestValue = 7        BestCooldown = 0.46    elseif BestAxe.ToolName.Value == "AxeTwitter" and tree == "Volcano" then        BestValue = 2.5        BestCooldown = 0.4    elseif BestAxe.ToolName.Value == "AxeTwitter" and tree == "CaveCrawler " then        BestValue = 3.9        BestCooldown = 0.4    elseif BestAxe.ToolName.Value == "CaveAxe" and tree == "CaveCrawler" then        BestValue = 7.2        BestCooldown = 0.22    elseif BestAxe.ToolName.Value == "GingerbreadAxe" and tree == "Walnut" then        BestValue = 7.2        BestCooldown = 0.22    elseif BestAxe.ToolName.Value == "IceAxe" and tree == "Frost" then        BestValue = 6        BestCooldown = 0.31    end
 
     
     for i, v in pairs(game.workspace:GetDescendants()) do
         if getgenv().treestop then
             getgenv().treestop = false
             return
         end
 
         if BestValue == 0 or BestAxe == nil then
             break
         end
         if v:IsA("BasePart") and v.Name == "WoodSection" and v:FindFirstChild("ID") and v.ID.Value == 1 and v.Parent and v.Parent:IsA("Model") and v.Parent:FindFirstChild("TreeClass") and v.Parent.TreeClass.Value == tree and v.Parent:FindFirstChild("Owner") and v.Parent.Parent and v.Parent.Parent.Name == "TreeRegion" and treesCut < treeAmt and not v.Parent:FindFirstChild("RootCut") then


             if BestAxe.ToolName.Value ~= "EndTimesAxe" and tree == "LoneCave" then library:Notify("Butter!","You need an EndTimes axe for this Procedure!",3) break end
 
             if BestAxe.ToolName.Value == "EndTimesAxe" and tree == "LoneCave" then
 
                 GodMode(v.CFrame)
                 print(calculateHitsForEndPart(v))
 
                 NumberTohit = calculateHitsForEndPart(v)
                 NumberTohit = NumberTohit - 1
 
                 for i = 1, NumberTohit do
                     local args = {
                         [1] = v.Parent.CutEvent,
                         [2] = {
                             ["tool"] = BestAxe,
                             ["faceVector"] = Vector3.new(-1, 0, 0),
                             ["height"] = 0.7449536323547363,
                             ["sectionId"] = 1,
                             ["hitPoints"] = BestValue,
                             ["cooldown"] = BestCooldown,
                             ["cuttingClass"] = "Axe"
 
                         }
 
                     }
 
                     game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(unpack(args))
 
                     task.wait(0.75)
                 end
 
                 Player.Character.Humanoid.Health = 0
 
                 repeat task.wait(1) until Player.Character.Humanoid.Health == 100
 
                 PickUpTool("EndTimesAxe")
 
                 wait(1)
 
                 game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
 
                 local best = getBestAxeNoRequire()
 
                 BestAxe = best[1]
                 BestCooldown = best[2]
                 BestValue = best[3]
 
                 BestValue = 10000000
                 BestCooldown = 0.3
 
                 wait(1)
 
                 for i = 1,3 do
                 local args = {
                     [1] = v.Parent.CutEvent,
                     [2] = {
                         ["tool"] = BestAxe,
                         ["faceVector"] = Vector3.new(-1, 0, 0),
                         ["height"] = 0.7449536323547363,
                         ["sectionId"] = 1,
                         ["hitPoints"] = BestValue,
                         ["cooldown"] = BestCooldown,
                         ["cuttingClass"] = "Axe"
 
                     }
 
                 }
                 if v.Parent:FindFirstChild("RootCut") then
                     continue
                 end
                 game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(unpack(args))
                 task.wait(0.5)
                 end
             else
                 tp(v.CFrame)
 
 
                 repeat
                     if getgenv().treestop then
                         getgenv().treestop = false
                         return
                     end
                     task.wait()

                     --print(v.Parent.CutEvent,BestAxe,BestValue,BestCooldown)
 
                     local args = {
                         [1] = v.Parent.CutEvent,
                         [2] = {
                             ["tool"] = BestAxe,
                             ["faceVector"] = Vector3.new(-1, 0, 0),
                             ["height"] = 0.7449536323547363,
                             ["sectionId"] = 1,
                             ["hitPoints"] = BestValue,
                             ["cooldown"] = BestCooldown,
                             ["cuttingClass"] = "Axe"
 
                         }
 
                     }
 
                     game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(unpack(args))
                 until v.Parent:FindFirstChild("RootCut")
 
             end
 
             repeat task.wait() until treeToTp ~= nil

             treesCut = treesCut + 1

            if getgenv().treestop then
                getgenv().treestop = false
                return
            end
            
            print(tree)
            --if tree ~= "LoneCave" then
                for i = 1, (Tree == "LoneCave" and 150) or 35 do 
                    task.wait()
                    game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(treeToTp:FindFirstChild("WoodSection").parent)
                end
            --end

                for i, v in pairs(treeToTp:GetChildren()) do
                    if v:IsA("BasePart") then
                        v.CFrame = OldCF * CFrame.new(0, 10, 0)
                    end
                end
 
             task.wait(1)
             game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldCF
             treeToTp = nil
         end
     end
     print("aad")
     woodHook:Disconnect()
     if tree == "LoneCave" then
     repeat task.wait(1) until Player.Character.Humanoid.Health == 100
     PickUpTool("EndTimesAxe")
     end
 end
 
  
  --treeCutNoRequire("Volcano", 1)
  
  --#endregion

   --#region item teleport

 function SelectionTp(Coordinates, PlayerToTP, TeleportBack, TeleportDirection)
    local startTime = tick()
    
     getgenv().DeleteNotfi = false 
     getgenv().StopTeleportSelectedItems = false
 
     if TeleportDirection == "Sideways" then
         Coordinates = Coordinates * CFrame.Angles(math.rad(90), 0, 0)
     end
 
     OldPosition = Player.Character.HumanoidRootPart.CFrame
 
     local allDescendants = game.Workspace.PlayerModels:GetDescendants()
     local filteredDescendants = {}
 
     for _, v in ipairs(allDescendants) do
         if v:FindFirstChild("Selection") then
             table.insert(filteredDescendants, v)
         end
     end
 
     local totalItems = #filteredDescendants
     local progress = library:ProgressNoti("Processing Items", totalItems, true)
 
     local lastUpdateTime = tick()
     local itemsProcessed = 0
     local totalTimeElapsed = 0
 
     for i, v in ipairs(filteredDescendants) do
 
         if getgenv().StopTeleportSelectedItems then
             progress.DeleteProgress()
             library:Notify("Process Stopped", "Teleportation process has been stopped.", 3)
             break
         end
 
         local itemStartTime = tick()
 
         if v.Parent:FindFirstChild("Owner") and tostring(v.Parent.Owner.Value) == PlayerToTP then
             if (Player.Character.HumanoidRootPart.Position - v.Position).Magnitude >= 15 then
                 Player.Character.HumanoidRootPart.CFrame = CFrame.new(v:FindFirstChild("Selection").Parent.CFrame.p) * CFrame.new(5, 0, 0)
             end
 
             wait(GetPing())
 
             OldColor = v.Color
 
             for j = 1, 50 do
                 v.Color = Color3.fromRGB(0, 255, 0)
                 game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.Parent)
                 task.wait()
             end
 
             v.Color = OldColor
 
             if isnetworkowner(v) then
                 v.CFrame = Coordinates
             else
                 game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.Parent)
                 v.CFrame = Coordinates
             end
 
             wait()
         end
 
         itemsProcessed = itemsProcessed + 1
         progress.Update(itemsProcessed)
 
         -- Calculate elapsed time and estimate remaining time
         local currentTime = tick()
         local elapsedTime = currentTime - startTime
 
         local itemTimeElapsed = currentTime - itemStartTime
         totalTimeElapsed = totalTimeElapsed + itemTimeElapsed
 
         local averageTimePerItem = totalTimeElapsed / itemsProcessed
         local remainingItems = totalItems - itemsProcessed
         local remainingTime = averageTimePerItem * remainingItems
         local estimatedTimeLeft = tostring(math.ceil(remainingTime))
 
         -- Notify with estimated time left
         local notifa = library:Notify("Progress Update", "Estimated time left: " .. estimatedTimeLeft .. " seconds", 3 , nil, nil, true)
 
         lastUpdateTime = currentTime
     end
     
     getgenv().DeleteNotfi = true 

     if TeleportBack then
         Player.Character.HumanoidRootPart.CFrame = OldPosition * CFrame.new(5, 0, 5)
     end
 end
 
 
 

  
 --#endregion

  --#region Stacker

  local CarNoClipTable = {}
     
  function CarNoClip(v)
     if v then
         for i, v in next, game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent:GetDescendants() do
             if v:IsA("BasePart") and v.CanCollide then
                 table.insert(CarNoClipTable, v)
                 v.CanCollide = false
             end
         end
     else
         for i, v in CarNoClipTable do
             v.CanCollide = true
         end
         CarNoClipTable = {}
      end
  end

  function Stacker(XXSort, YYSort, ZZSort, Playersort, Sped)

     if getgenv().SynapseStacker then
        if not game.Players.LocalPlayer.Character.Humanoid.SeatPart then library:Notify("Butter!","You Need to sit in a Car or Truck!",6) end
     end
    
     local tests = {}
     local MainPartName = nil
     local MainPart = nil
     local RRSort = 0
     local OldCamara = Camera.CameraSubject
     --game.workspace.Gravity = -0.5
     CarNoClip(true)
 
     SortStart = Mouse.Button1Down:connect(function()
         repeat wait() until Mouse.Target.Name == "Main" or Mouse.Target.Name ==
             "WoodSection"
 
         MainPartName = Mouse.Target.Name
         MainPart = Mouse.Target
 
         SortStart:Disconnect()
     end)
 
     repeat wait() until MainPart
 
     OldColor = MainPart.Color
 
     MainPart.Color = Color3.fromRGB(0, 255, 0)
 
     wait(0.1)
     MainPart.Color = OldColor
 
     sortbox = Instance.new("Part", game.Workspace)
 
     sortbox.Size = Vector3.new(((MainPart.Size.x + 0.1) * XXSort),MainPart.Size.y * YYSort, ((MainPart.Size.z + 0.1) * ZZSort))
 
     sortbox.Color = Color3.fromRGB(0, 255, 0)
     sortbox.Transparency = 0.3
     sortbox.CanCollide = false
     sortbox.Anchored = true
     sortbox.Material = "ForceField"
 
     Mouse.TargetFilter = sortbox
 
     print(";")
     getgenv().Dad231 = true
 
     task.spawn(function()
         while getgenv().Dad231 do
             task.wait()
 
             sortbox.Position = CFrame.new(Mouse.Hit.X +
                 ((XXSort / 2) * MainPart.Size.x),
                 Mouse.Hit.Y +
                 ((YYSort / 2) * MainPart.Size.y +
                 0.01), Mouse.Hit.z +
                 ((ZZSort / 2) * MainPart.Size.z)) *
             Vector3.new(0, 0.0, 0)
         end
 
     end)
 
     SortBoxC = Mouse.Button1Down:connect(function()
         if not getgenv().Dad231 then game.workspace.Gravity = 196.2 return end
 
         local cf = sortbox.CFrame -
             Vector3.new(sortbox.Size.X / 2, sortbox.Size.Y / 2,
                 sortbox.Size.Z / 2)
 
         wait() -- FUCK THIS WAIT ALL MY GAYS HATE THIS WAIT
 
         getgenv().Dad231 = false
 
         if MainPart.Name == MainPartName then
             if MainPart.Parent:FindFirstChild("Owner") and
                 tostring(MainPart.Parent.Owner.Value) == Playersort then
 
                 for i, v in pairs(
                     game.Workspace.PlayerModels:GetDescendants()) do
 
                     if v.Name == MainPartName then
                         if v.Parent.Name == MainPart.Parent.Name then
                             if v.Parent:FindFirstChild("Owner") and
                                 tostring(v.Parent.Owner.Value) == Playersort then
                                 if v.Color == MainPart.Color then
                                     table.insert(tests, v)
 
                                     if XXSort * YYSort * ZZSort == #tests then
                                         break
                                     end
                                     -- print(#tests)
                                 end
                             end
                         end
                     end
                 end
 
                 for i, v in next, tests do

                    if getgenv().StackerStop then Camera.CameraSubject = OldCamara game.workspace.Gravity = 196.2 sortbox:Destroy() MainPart = nil MainPartName = nil FixNames() break end
 
                    local cf2 = cf + Vector3.new((v.Size.X/2) + 0.1, v.Size.Y - 1, (v.Size.Z/2) + 0.1)
 
                     if not v.Parent.PrimaryPart then v.Parent.PrimaryPart = v.Parent:FindFirstChild(MainPartName)
                     end
 
                     -- if getgenv().sortsortcancel then break end
 
                     if not v.Parent:FindFirstChild("ItemName") or tostring(v.Parent.Owner) == Player.Name then


                        local Freeze, Pos = Instance.new("BodyVelocity", v), Instance.new("BodyPosition", v)
                        Freeze.Velocity = Vector3.new(0, 0, 0)
                        Freeze.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                        Freeze.P = 9000
                        Pos.MaxForce = Vector3.new(0,0,0)
                        Pos.P = 100000

                        
 
                         --if (Player.Character.HumanoidRootPart.Position - v.Position).Magnitude >=
                             --15 then
                             --Player.Character.HumanoidRootPart.CFrame = v.CFrame + Vector3.new(5, 10, 0)
                             --wait(0.01)
                         --end
                         --task.wait(0.1)



                         OldColor = v.Color
 
                         v.Color = Color3.fromRGB(0, 255, 0)
                         
                        --if getgenv().Synapse then
                        --repeat task.wait() game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.Parent) until v:FindFirstChild("SelectionBox") and isnetworkowner(v)
                        --else

                        if not getgenv().SynapseStacker then

                          for i = 1,2 do
                             game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.Parent)
                             task.wait(Sped)
                          end

                          else

                          while not isnetworkowner(v) do
                            game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent:SetPrimaryPartCFrame((v.CFrame * CFrame.new(0, 0, 10)) * CFrame.Angles(math.rad(180), 0, 0))
                            wait(0.01)
                          end

                        end

                        v.Parent:PivotTo(cf2)
                        --Camera.CameraSubject = v


                         spawn(function()
                            wait(5)
                            Freeze:Destroy()
                            Pos:Destroy()
                         end)
 
                     else
                         wait(0.5)
                         game:GetService("ReplicatedStorage").PlaceStructure
                             .ClientPlacedStructure:FireServer(v.Parent.ItemName
                             .Value, cf2,
                             v.Parent.Owner
                                 .Value, nil,
                             v.Parent, true)
                     end
 
                     v.Color = OldColor
 
                     RRSort = RRSort + 1
 

                     cf = cf + Vector3.new(v.Size.X + 0, 0, 0)
                     if math.floor(RRSort/XXSort) == RRSort/XXSort then
                       cf = cf - Vector3.new((v.Size.X + 0) * XXSort, 0, -v.Size.Z - 0)
                     end
                   
                     if math.floor(RRSort/(ZZSort * XXSort)) == RRSort/(ZZSort * XXSort) then
                       cf = cf - Vector3.new(0, -v.Size.Y - 0, (v.Size.Z + 0) * ZZSort)
                     end



                 end
                 FixNames()
                 sortbox:Destroy()
                 game.workspace.Gravity = 196.2
                 CarNoClip(false)
                 Camera.CameraSubject = OldCamara 
             end
         end
         SortBoxC:Disconnect()
     end)
 end
  --Stacker(2, 2, 2, "All_Dupes")
  -- #endregion

   --#region Mod Wood
 pcall(function() local Maid = loadstring(game:HttpGet('https://raw.githubusercontent.com/Butterisgood/Butter-Cuties/main/Other/Maid'))("") end)


 function Modwood()
    getgenv().ModStop = false
    getgenv().Sawmill = nil

    getBestAxeNoRequire()

    if not getgenv().Sawmill then SelectSawmill() end 
    
    repeat task.wait() if getgenv().ModStop then break end until getgenv().Sawmill


    local parentbranch = nil 
    local childbranch = nil 
    local Clicked = nil 
    local treelimbblist = {}

     print(childbranch) 
     print(table.unpack(treelimbblist))

     library:Notify("Butter!","Click a tree to mod wood",1.5)
    
     ModwoodConnection = Mouse.Button1Down:Connect(function()
        Clicked = Mouse.Target
         if Clicked and Clicked.Parent and Clicked.Parent:FindFirstAncestor("LogModels") then
             if Clicked.Parent:FindFirstChild("Owner") and Clicked.Parent.Owner.Value == Player then
                 for _, v in pairs(Clicked.Parent:GetDescendants()) do
                     if v.Name == 'ChildIDs' and #(v:GetChildren()) == 0 then
                         table.insert(treelimbblist, v.Parent.ID.Value)
                     end
                 end
                 table.sort(treelimbblist)
 
                 for _, v in pairs(Clicked.Parent:GetDescendants()) do
                     if v.Name == 'ChildIDs' then
                         for _, v2 in pairs(v:GetChildren()) do
                             if v2.Value == treelimbblist[#treelimbblist] then
                                 parentbranch = v2.Parent.Parent
                                 parentbranch.Color = Color3.fromRGB(255, 0, 0)
                             end
                         end
                     else
                         if v.Name == 'ID' and v.Value == treelimbblist[#treelimbblist] then
                             v.Parent.Color = Color3.fromRGB(0, 255, 0)
                             childbranchId = treelimbblist[#treelimbblist]
                             childbranch = v.Parent
                         end
                     end
                 end
             end
         end
 
         ModwoodConnection:Disconnect()
         if not childbranch then library:Notify("Butter!","Thats not a tree!",1.5) return end
         print(childbranch)
     end)

 
     repeat wait() until childbranch
 
 
     if not childbranch then return end -- This is so it does not try with out a tree!
 
 
 
     local LavaPart = GetLava()
 
     LavaPart.Lava.Size = Vector3.new(1, 1, 1)
 
     OldPoss = Player.Character.HumanoidRootPart.CFrame
 

     FirstPart = childbranch.Parent:FindFirstChild("WoodSection")
 
     Player.Character.HumanoidRootPart.CFrame = FirstPart.CFrame * CFrame.new(5, 0, 0)
 
     wait(GetPing())
 
     local LavaPart = GetLava()
 
     repeat

        if getgenv().ModStop then return end
 
         Player.Character.HumanoidRootPart.CFrame = FirstPart.CFrame * CFrame.new(5, 0, 0)

 
         for i = 1, 20 do
             game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(parentbranch.Parent)
             task.wait()
         end


 
         if isnetworkowner(parentbranch) then
            parentbranch.Parent:PivotTo(CFrame.new(-1425, 489, 1244))
         else
            game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(parentbranch.Parent)
            parentbranch.Parent:PivotTo(CFrame.new(-1425, 489, 1244))
         end
 
         wait(GetPing() * 2)
 
        firetouchinterest(parentbranch, LavaPart.Lava, 0)
        firetouchinterest(parentbranch, LavaPart.Lava, 1)
 
     until parentbranch:FindFirstChild('LavaFire')
 
     wait()
 
     FirstPart = childbranch.Parent:FindFirstChild("WoodSection")
 
     Player.Character.HumanoidRootPart.CFrame = FirstPart.CFrame
 
     wait(GetPing())
 
     for i = 1, 20 do
         Player.Character.HumanoidRootPart.CFrame = FirstPart.CFrame
         game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(FirstPart.Parent)
         FirstPart.Velocity = Vector3.new(0, 0, 0)
         childbranch.Velocity = Vector3.new(0, 0, 0)
         task.wait()
     end
 
     if isnetworkowner(FirstPart) then
         FirstPart.CFrame = CFrame.new(-1055, 291, -458)
     else
         game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(FirstPart.Parent)
         FirstPart.CFrame = CFrame.new(-1055, 291, -458)
     end
 
     wait(GetPing())
 
     Player.Character.HumanoidRootPart.CFrame = childbranch.CFrame * CFrame.new(5, 0, 0)
 
     for i = 1, 20 do
         game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(childbranch.Parent)
         task.wait()
     end
 
     if isnetworkowner(childbranch) then
         childbranch.CFrame = OldPoss--CFrame.new(-1055, 291, -458)
     else
         game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(childbranch.Parent)
         childbranch.CFrame = OldPoss--CFrame.new(-1055, 291, -458)
     end
 
     parentbranch:FindFirstChild('LavaFire'):Destroy()
     parentbranch:FindFirstChild('BodyAngularVelocity'):Destroy()
     parentbranch:FindFirstChild('BodyVelocity'):Destroy()
 
 
     Player.Character.HumanoidRootPart.CFrame = parentbranch.CFrame * CFrame.new(5, 0, 0)
 
     wait(GetPing())
 
     repeat
         if getgenv().ModStop then return end
         game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(parentbranch.Parent)
         parentbranch.CFrame = CFrame.new(314.54, -0.5, 86.823)
         task.wait()
     until not parentbranch.Parent
 
     FirstPart = childbranch.Parent:FindFirstChild("WoodSection")
 
     Player.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
     Player.Character.HumanoidRootPart.CFrame = FirstPart.CFrame * CFrame.new(5, 0, 0)
 
 
 
     worked = false
     Maid:Register("Uwu", game.Workspace.LogModels.ChildAdded:Connect(function(v)
         if v:WaitForChild("Owner") and v.Owner.Value == Player then
             if v:WaitForChild("WoodSection") then
                 worked = true
                 Maid:DeRegister("Uwu")
                 print("a")
             end
         end
     end))
     print("a")
     task.spawn(function()
         repeat
             wait()
             Player.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
             Player.Character.HumanoidRootPart.CFrame = FirstPart.CFrame * CFrame.new(5, 0, 0)
         until worked
     end)
 
     local axeData = getBestAxeNoRequire()
     local BestAxe, BestCooldown, BestValue, TreeName
     BestAxe = axeData[1]
     BestCooldown = axeData[2]
     BestValue = axeData[3]
     TreeName = tostring(childbranch.Parent.TreeClass.Value)
     print(TreeName)
 
     if BestAxe.ToolName.Value == "FireAxe" and TreeName == "Volcano" then BestValue = 6.35 BestCooldown = 0.35 elseif BestAxe.ToolName.Value == "EndTimesAxe" and TreeName == "LoneCave" then        BestValue = 10000000        BestCooldown = 0.3    elseif BestAxe.ToolName.Value == "AxeSwamp" and TreeName == "GreenSwampy" then        BestValue = 7        BestCooldown = 0.46    elseif BestAxe.ToolName.Value == "AxeTwitter" and TreeName == "Volcano" then        BestValue = 2.5        BestCooldown = 0.4    elseif BestAxe.ToolName.Value == "AxeTwitter" and TreeName == "CaveCrawler " then        BestValue = 3.9        BestCooldown = 0.4    elseif BestAxe.ToolName.Value == "CaveAxe" and TreeName == "CaveCrawler" then        BestValue = 7.2        BestCooldown = 0.22    elseif BestAxe.ToolName.Value == "GingerbreadAxe" and TreeName == "Walnut" then BestValue = 7.2 BestCooldown = 0.22 elseif BestAxe.ToolName.Value == "IceAxe" and TreeName == "Frost" then BestValue = 6 BestCooldown = 0.31 end
 
     repeat
        if getgenv().ModStop then return end
         wait()
         game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(
             childbranch.Parent:FindFirstChild("CutEvent"),
             {
                 ["tool"] = BestAxe,
                 ["faceVector"] = Vector3.new(1, 0, 0),
                 ["height"] = 0.3,
                 ["sectionId"] = 1,
                 ["hitPoints"] = BestValue,
                 ["cooldown"] = BestCooldown,
                 ["cuttingClass"] = "Axe"
             })
     until worked
 
     wait(GetPing())
     Player.Character.HumanoidRootPart.CFrame = childbranch.CFrame
     wait(GetPing())


    for i = 1, 20 do
        game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(childbranch.Parent)
        task.wait()
    end

    if isnetworkowner(childbranch) then
        childbranch.CFrame = getgenv().Sawmill.Particles.CFrame + Vector3.new(0, .5, 0)
    else
        game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(childbranch.Parent)
        childbranch.CFrame = getgenv().Sawmill.Particles.CFrame + Vector3.new(0, .5, 0)
    end

    wait(GetPing())
    Player.Character.HumanoidRootPart.CFrame = OldPoss
    library:Notify("Butter","Done!",1.5)
 end
  --Modwood()
 
  --#endregion

   --#region Small Functions

 --#region Main Loop

local messages = {
    "Apple and Gamer are Cute!",
    "VX is cute!",
    "Defaultio give me a foot job!",
    "Defaultio's music taste is top-notch, no cap 2025!",
    "Time to work on some ambulances!",
    "Silent... oh boy I will touch you one day",
    "Tip is my tip on a good day!",
    "Credit to chat GPT, All my boys are at open AI like Butter!",
    "Jake paul and Mike tyson"
}

--local message = messages[math.random(#messages)]
--PremiumselectionText.SurfaceGui.TextLabel.Text = message
--wait(5)
  
if not getgenv().ButterRan then
    task.spawn(function()
        while wait(1) do
            local canLoad, waitMessage = game:GetService("ReplicatedStorage").LoadSaveRequests.ClientMayLoad:InvokeServer(Player)
        
            if waitMessage then
                local waitTime = tonumber(waitMessage:match("Wait (%d+)"))
                if waitTime then
                    game.CoreGui.LoadGui.Frame.TextLabel.TextSize = 20
                    game.CoreGui.LoadGui.Frame.TextLabel.Text = tostring(waitTime)
                else
                    game.CoreGui.LoadGui.Frame.TextLabel.TextSize = 15
                    game.CoreGui.LoadGui.Frame.TextLabel.Text = "Can't load"
                end
            else
                if canLoad then
                    game.CoreGui.LoadGui.Frame.TextLabel.TextSize = 17
                    game.CoreGui.LoadGui.Frame.TextLabel.Text = "Can load"
                else
                    game.CoreGui.LoadGui.Frame.TextLabel.TextSize = 15
                    game.CoreGui.LoadGui.Frame.TextLabel.Text = "Can't load"
                end
            end
        end
        
    end)
end
 --#endregion

 --#region GodMode
 function GodMode(cord)
    pcall(function()
        Player.Character.HumanoidRootPart.RootJoint.C1 = CFrame.new(0, 0, 6)
    end)

    Player.Character.HumanoidRootPart.CFrame = CFrame.new(-1425, 433.4, 1244)

    local LavaPart = GetLava()
    LavaPart.Lava.Size = Vector3.new(1, 1, 1)


    wait(1)

    task.spawn(function()
        wait(2)
        local Clone = Player.Character.Torso:Clone()

        Clone.Name = "HumanoidRootPart"

        Clone.Transparency = 1

        Clone.Parent = Player.Character

        Player.Character.HumanoidRootPart.CFrame = cord
        Clone.CFrame = cord
    end)

    repeat task.wait(1)

        if identifyexecutor() == "Wave" then
            firetouchinterest(parentbranch, LavaPart.Lava, true)
        else
            firetouchinterest(Player.Character.HumanoidRootPart, LavaPart.Lava, 0)
        end
    
    until Player.Character.HumanoidRootPart:FindFirstChild("LavaFire")

    Player.Character.HumanoidRootPart.LavaFire:Destroy()

    task.wait(1)
end
--#endregion

 --#region Selection stuff
 
 --#region Lasso stuff
 
 --#region Lasso Tool
 function isValidModel(v) local modelName = v.Name:lower() return v:FindFirstChild("Main") and not (string.find(modelName, "saw") or string.find(modelName, "utility") or string.find(modelName, "trailer") or string.find(modelName, "pickup") or string.find(modelName, "PropertySoldSign")) end

 local RunConnection = UserInputService.InputBegan:Connect(function(input) if not getgenv().Lasso then return end
 
     if input.UserInputType == Enum.UserInputType.MouseButton1 then
         Frame.Visible = true
         Frame.Position = UDim2.new(0, Mouse.X, 0, Mouse.Y)
         while UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
             RunService.RenderStepped:Wait()
 
             Frame.Size = UDim2.new(0, Mouse.X, 0, Mouse.Y) - Frame.Position
 
             for _, v in pairs(game.Workspace.PlayerModels:GetChildren()) do
                     local prt = v:FindFirstChild("Main") and v.Main or v:FindFirstChild("WoodSection") and v.WoodSection
 
                     if not prt or (not prt.Name == "Main" or not prt.Name == "WoodSection" and not isValidModel(v)) or not v:FindFirstChild("Owner") then
                         continue
                     end
                     
 
                     local ScreenPos, Visible = Camera:WorldToScreenPoint(prt.CFrame.p)
 
                     if is_in_frame(ScreenPos, Frame) then
                         if (prt:FindFirstChild("Selection")) then
                             continue
                         end
 
 
                         local SelectionBox = Instance.new("Selection", prt)
                         SelectionBox.Name = "Selection"
                         SelectionBox.Adornee = SelectionBox.Parent
                         SelectionBox.SurfaceTransparency = 0.5
                         SelectionBox.LineThickness = 0.09
                         SelectionBox.SurfaceColor3 = Color3.fromRGB(0, 0, 0)
                         SelectionBox.Color3 = Color3.fromRGB(1, 254, 0)
                     end
             end
         end
 
         Frame.Size = UDim2.new(0, 1, 0, 1)
         Frame.Visible = false
     end
 end)
 
 function is_in_frame(screenpos, frame)
     local xPos = frame.AbsolutePosition.X
     local yPos = frame.AbsolutePosition.Y
 
     local xSize = frame.AbsoluteSize.X
     local ySize = frame.AbsoluteSize.Y
 
     local check1 = screenpos.X >= xPos and screenpos.X <= xPos + xSize
     local check2 = screenpos.X <= xPos and screenpos.X >= xPos + xSize
 
     local check3 = screenpos.Y >= yPos and screenpos.Y <= yPos + ySize
     local check4 = screenpos.Y <= yPos and screenpos.Y >= yPos + ySize
 
     local finale = (check1 and check3) or (check2 and check3) or (check1 and check4) or (check2 and check4)
 
     return finale
 end
 --#endregion
 
 
 --#region LasooDeselect
 function LasooDeselect()
     for i,v in pairs(game.Workspace.PlayerModels:GetChildren()) do if v:FindFirstChild("Main") or v:FindFirstChild("WoodSection") then if v.Main:FindFirstChild("Selection") then v.Main.Selection:Destroy() end end end
 end
 --#endregion
 
 --#endregion
 

 --#region GroupSelection
 function GroupSelection(Value,PlayerToTP)     if not Value then         print("a")         ClickSelection:Disconnect()         return     end     ClickSelection = Mouse.Button1Up:Connect(function()         for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do             if (not v:FindFirstChild("Main") and not v:FindFirstChild("WoodSection")) or (v:FindFirstChild("Main") and v.Main:FindFirstChild("Selection")) or                 (v:FindFirstChild("WoodSection") and v.WoodSection:FindFirstChild("Selection")) or not Mouse.Target.Parent:FindFirstChild("Owner") then                 continue             end             if tostring(v.Owner.Value) ~= PlayerToTP then continue end                 pcall(function()                 if v:FindFirstChild("Main") and v.Main.Parent.Name == Mouse.Target.Parent.Name and (v:FindFirstChild("DraggableItem") or v:FindFirstChild("PurchasedBoxItemName")) then                     print(v)                     local bobv2 = Instance.new("Selection", v.Main)                     bobv2.Name = "Selection"                     bobv2.Adornee = bobv2.Parent                     bobv2.SurfaceTransparency = 0.5                     bobv2.LineThickness = 0.09                     bobv2.SurfaceColor3 = Color3.fromRGB(0, 0, 0)                     bobv2.Color3 = Color3.fromRGB(1, 254, 0)                 elseif v:FindFirstChild("WoodSection") then                     print("WTF")                     if v.TreeClass.Value == Mouse.Target.Parent.TreeClass.Value then                     print("added")                     local bobv2 = Instance.new("Selection", v.WoodSection)                     bobv2.Name = "Selection"                     bobv2.Adornee = bobv2.Parent                     bobv2.SurfaceTransparency = 0.5                     bobv2.LineThickness = 0.09                     bobv2.SurfaceColor3 = Color3.fromRGB(0, 0, 0)                     bobv2.Color3 = Color3.fromRGB(1, 254, 0)                     end                 end             end)         end     end) end
 --#endregion


 --#region Click selection
 function ClickToTP(Value)     if not Value then         ClickToSelect:Disconnect()         return     end     ClickToSelect = Mouse.Button1Up:Connect(function()         local target = Mouse.Target.Parent         if target:FindFirstChild("Owner") and target:FindFirstChild("Main") then             for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do                 if Mouse.Target:FindFirstChild("Selection") then                 else                     local bob = Instance.new("Selection", target.Main)                     bob.Name = "Selection"                     bob.Adornee = bob.Parent                                          bob.SurfaceTransparency = 0.5                     bob.LineThickness = 0.09                     bob.SurfaceColor3 = Color3.fromRGB(0, 0, 0)                     bob.Color3 = Color3.fromRGB(1, 254, 0)                 end             end         elseif target:FindFirstChild("Owner") and target:FindFirstChild("WoodSection") then             for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do                 if Mouse.Target:FindFirstChild("Selection") then                 else                     local bob = Instance.new("Selection", target.WoodSection)                     bob.Name = "Selection"                     bob.Adornee = bob.Parent                                       bob.SurfaceTransparency = 0.5                     bob.LineThickness = 0.09                     bob.SurfaceColor3 = Color3.fromRGB(0, 0, 0)                     bob.Color3 = Color3.fromRGB(1, 254, 0)                 end             end         end     end) end
--#endregion


 --#region DeselectAll
 function DeselectAll()     for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do         if v:FindFirstChild("Main") then             if v.Main:FindFirstChild("Selection") then                 v.Main.Selection:Destroy()             end         end     end     for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do         if v:FindFirstChild("WoodSection") then             if v.WoodSection:FindFirstChild("Selection") then                 v.WoodSection.Selection:Destroy()             end         end     end     for i, v in pairs(game.Workspace.PlayerModels:GetChildren()) do         if v:FindFirstChild("BuildDependentWood") then             if v.BuildDependentWood:FindFirstChild("Selection") then                 v.BuildDependentWood.Selection:Destroy()             end         end     end end
--#endregion


--#endregion

 --#region Base stuff

 --#region FreeLand - MaxLand - Force save
 function FreeLand()
    for i, v in next, game.Workspace.Properties:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == nil then
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientPurchasedProperty:FireServer(v,v.OriginSquare.Position)
            Player.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0, 3.1, -5)
            break
        end
    end
end

function MaxLand()
    for s, d in pairs(game.workspace.Properties:GetChildren()) do         if d:FindFirstChild("Owner") and d:FindFirstChild("OriginSquare") and d.Owner.Value == Player then             local PlotPos = d.OriginSquare.Position             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X + 40, PlotPos.Y, PlotPos.Z))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X - 40, PlotPos.Y, PlotPos.Z))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X, PlotPos.Y, PlotPos.Z + 40))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X, PlotPos.Y, PlotPos.Z - 40))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X + 40, PlotPos.Y, PlotPos.Z + 40))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X + 40, PlotPos.Y, PlotPos.Z - 40))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X - 40, PlotPos.Y, PlotPos.Z + 40))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X - 40, PlotPos.Y, PlotPos.Z - 40))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X + 80, PlotPos.Y, PlotPos.Z))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X - 80, PlotPos.Y, PlotPos.Z))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X, PlotPos.Y, PlotPos.Z + 80))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X, PlotPos.Y, PlotPos.Z - 80))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X + 80, PlotPos.Y, PlotPos.Z + 80))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X + 80, PlotPos.Y, PlotPos.Z - 80))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X - 80, PlotPos.Y, PlotPos.Z + 80))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X - 80, PlotPos.Y, PlotPos.Z - 80))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X + 40, PlotPos.Y, PlotPos.Z + 80))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X - 40, PlotPos.Y, PlotPos.Z + 80))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X + 80, PlotPos.Y, PlotPos.Z + 40))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X + 80, PlotPos.Y, PlotPos.Z - 40))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X - 80, PlotPos.Y, PlotPos.Z + 40))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X - 80, PlotPos.Y, PlotPos.Z - 40))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X + 40, PlotPos.Y, PlotPos.Z - 80))             game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,                 CFrame.new(PlotPos.X - 40, PlotPos.Y, PlotPos.Z - 80))         end     end
end

function Forcesave()
   game:GetService("ReplicatedStorage").LoadSaveRequests.RequestSave:InvokeServer(Player.CurrentSaveSlot.Value, Player)
end
--#endregion

 --#region SelectSawmill
 function SelectSawmill(Sawmod)
    getgenv().Sawmill = nil
    library:Notify("Butter","Click a sawmill!",3)
    sawmillConnection = Mouse.Button1Down:Connect(function()
        local Target = Mouse.Target.Parent
        if Target:FindFirstChild("Settings") and Target.Settings:FindFirstChild("DimZ") or Target.Parent:FindFirstChild("Settings") and Target.Parent.Settings:FindFirstChild("DimZ") then
            getgenv().Sawmill = Target.Parent
            library:Notify("Butter","Worked! got " ..tostring(getgenv().Sawmill),3)
            sawmillConnection:Disconnect()
        else
            library:Notify("Butter","Not a Sawmill",3)
        end
    end)
    if not Sawmod then task.spawn(function() wait(10) if sawmillConnection then sawmillConnection:Disconnect() end end) end
end
--#endregion

 --#region ModSawmill

 function ModSawmill()

    local Modsaw = true

    if not Player.PlayerBlueprints.Blueprints:FindFirstChild("Floor2") then
        Modsaw = false
        library:Notify("Butter!", "You need 'Floor2' to do this do you want to buy it?", 3, true, function(Value)
            if Value then AutoBuy("Floor2",1,true,false) Modsaw = true else return end
        end)
    end

    repeat task.wait() until Modsaw

    getgenv().Sawmill = nil

    SelectSawmill(true)

    repeat
        Wait()
    until getgenv().Sawmill

    local Conveyor, Conveyors = nil, getgenv().Sawmill.Conveyor.Model:GetChildren()

    local Orientation = getgenv().Sawmill.Main.Orientation.Y

    for i = (getgenv().Sawmill.ItemName.Value:match("Sawmill4L") and #Conveyors - 1) or #Conveyors, #Conveyors do
        Conveyor = Conveyors[i]

        break
    end

    local Offset = .4

    for i = 1, 4 do
        Offset = Offset + 0.2

        game:GetService("ReplicatedStorage").PlaceStructure.ClientPlacedBlueprint:FireServer(
            "Floor2",
            CFrame.new(
                Conveyor.CFrame.p +
                Vector3.new(
                    (Orientation == 0 and -Offset) or (Orientation == 180 and Offset) or 0,
                    1.5,
                    (Orientation == -90 and -Offset) or (Orientation == 90 and Offset)
                )
            ) *
            CFrame.Angles(
                math.rad(((Orientation == 180 or Orientation == 0) and 90) or 45),
                math.rad(((Orientation == 180 or Orientation == 0) and 0) or 90),
                math.rad(((Orientation == 180 or Orientation == 0) and 90) or 45)
            ),
            Player
        )
        Wait(1.5)
    end

    library:Notify("Butter!","Fill Blueprints To Complete",6) -- Going to add auto fill later
    getgenv().Sawmill = nil
end

--#endregion

 --#region Land Art
 function Create(ToMake, Parent, Props)
    Props = Props or {}

    local Created = Instance.new(ToMake, Parent)

    for i, v in next, Props do
        Created[i] = v
    end
    return Created
end

function GetPlot(Value)
    local Value = Value or Player

    for i, v in next, game.Workspace.Properties:GetChildren() do
        if v:FindFirstChild "Owner" and v.Owner.Value == Value then
            return v
        end
    end

    return false
end

function LandArt(Value)
    if Value then if Player.OwnsProperty.value ~= true then return library:Notify("Butter!","You need land to use this!",3) end end

    if not Value then
        LandArtClick:Disconnect()
        LandArtMove:Disconnect()
        game.Workspace:FindFirstChild "PlotFolder":Destroy()
        return
    end

    local LandVecs = { Vector3.new(40, 0, 0), Vector3.new(-40, 0, 0), Vector3.new(0, 0, 40), Vector3.new(0, 0, -40),
        Vector3.new(40, 0, 40), Vector3.new(40, 0, -40), Vector3.new(-40, 0, 40), Vector3.new(-40, 0, -40), Vector3.new(
        80, 0, 0), Vector3.new(-80, 0, 0), Vector3.new(0, 0, 80), Vector3.new(0, 0, -80), Vector3.new(80, 0, 80), Vector3
        .new(80, 0, -80), Vector3.new(-80, 0, 80), Vector3.new(-80, 0, -80), Vector3.new(40, 0, 80), Vector3.new(-40, 0,
        80), Vector3.new(80, 0, 40), Vector3.new(80, 0, -40), Vector3.new(-80, 0, 40), Vector3.new(-80, 0, -40), Vector3
        .new(40, 0, -80), Vector3.new(-40, 0, -80) }

    local Folder, Selection = Create("Folder", game.Workspace, { Name = "PlotFolder" }),
        Create("SelectionBox", game.Workspace:WaitForChild("PlotFolder", 1), { Name = "Selection" })

    for i, v in next, LandVecs do
        Create("Part", Folder,
            {
                Name = "LandPreview",
                Transparency = 0.5,
                CFrame = CFrame.new(GetPlot().OriginSquare.Position + v),
                Size =
                    GetPlot().OriginSquare.Size,
                Color = Color3.fromRGB(124, 92, 70),
                Material = Enum.Material.Concrete,
                Anchored = true,
                CanCollide = false
            })
    end

    LandArtMove = Mouse.Move:Connect(function()
        local Target = Mouse.Target

        if Target:IsA "Part" and Target.Name == "LandPreview" then
            Selection.Adornee = Target
        else
            Selection.Adornee = nil
        end
    end)

    LandArtClick = Mouse.Button1Down:Connect(function()
        local Target = Mouse.Target

        if Target:IsA "Part" and Target.Name == "LandPreview" then
            game.ReplicatedStorage.PropertyPurchasing.ClientExpandedProperty:FireServer(GetPlot(),
                CFrame.new(Target.CFrame.p))
            Target:Destroy()
        end
    end)
end
--#endregion

 --#endregion
  --#region Environmental stuff

 --#region Hard Dragger
 function Dragger()     game.Workspace.ChildAdded:connect(function(a)         if a.Name == "Dragger" then             a.Color = Color3.fromRGB(235, 200, 0)             local bg = a:WaitForChild("BodyGyro")             local bp = a:WaitForChild("BodyPosition")             repeat                 if CustomDragger then                     task.wait()                     bp.P = 120000                     bp.D = 1000                     bp.maxForce = Vector3.new(90000, 90000, 90000) * math.huge                     bg.maxTorque = Vector3.new(90000, 90000, 90000) * math.huge                 else                     wait()                     bp.P = 10000                     bp.D = 800                     bp.maxForce = Vector3.new(17000, 17000, 17000)                     bg.maxTorque = Vector3.new(200, 200, 200)                 end             until not a         end     end) end
--#endregion


 --#region RemoveBoulders
 function RemoveBoulders(Value)     pcall(function()         if Value then             if game.Workspace.Region_Snow:FindFirstChild("PartSpawner") then                 game.Workspace.Region_Snow.PartSpawner.Parent = game.ReplicatedStorage             end             if game.Workspace.Region_Volcano:FindFirstChild("PartSpawner") then                 game.Workspace.Region_Volcano.PartSpawner.Parent = game.ReplicatedStorage             end         else             if game.ReplicatedStorage:FindFirstChild("PartSpawner") then                 local snowSpawner = game.ReplicatedStorage.PartSpawner:Clone()                 local volcanoSpawner = game.ReplicatedStorage.PartSpawner:Clone()                                  snowSpawner.Parent = game.Workspace.Region_Snow                 volcanoSpawner.Parent = game.Workspace.Region_Volcano             end         end     end) end 
--#endregion
 

 --#region AlwaysDay/AlwaysNight/NoFog
function updateLighting()
    if AlwaysDay and not AlwaysNight then
        lighting.TimeOfDay = "12:00:00"
        lighting.SunPos.Value = 1
        lighting.Ambient = Color3.new(1, 1, 1)

        lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
        lighting.ColorShift_Top = Color3.new(1, 1, 1)
    elseif AlwaysNight and not AlwaysDay then
        lighting.TimeOfDay = "00:00:00"
        lighting.SunPos.Value = -1
    end
    
    if NoFog then
        lighting.FogEnd = 100000
    end
end
 --#endregion

 --#region Teleports
 function TeleportToPlayer(Value)
    if game.workspace[Value].PrimaryPart then Player.Character.HumanoidRootPart.CFrame = game.workspace[Value].PrimaryPart.CFrame library:Notify("Success",tostring(Value),0.5) else library:Notify("Error!","Can't find player",1) end
 end

 function TeleportToPlayerPlot(Value)
    for i, v in next, game.Workspace.Properties:GetChildren() do if v:FindFirstChild("Owner") and tostring(v.Owner.Value) == Value then game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0, 3.1, -5) library:Notify("Success",tostring(Value),0.5) break end end
 end
 --#endregion

  --#region BridgeDown
  function BridgeDown(Value)     for i, v in next, game.Workspace.Bridge.VerticalLiftBridge.Lift:GetChildren() do         if not Value then             v.CFrame = v.CFrame + Vector3.new(0, 0.222, 0)         else             v.CFrame = v.CFrame - Vector3.new(0, 0.222, 0)         end     end end
  --#endregion
  
  
   --#region Water stuff
   function WalkOnWater(Value)     for i, v in next, game.Workspace.Water:GetChildren() do         if v.Name == "Water" then             v.CanCollide = Value         end     end library:Notify("Butter","Success!",0.3) end function RemoveWater(Value)     for i, v in next, game.Workspace.Water:GetChildren() do         if v.Name == "Water" then             if not Value then                 v.Transparency = 0             else                 v.Transparency = 1             end         end     end library:Notify("Butter","Success!",0.3) end
  --#endregion
  
  
   --#region BTools
   function BTools()     local Pllayyrs = game:GetService("Players").LocalPlayer     local deletetool = Instance.new("Tool", Pllayyrs.Backpack)     local undotool = Instance.new("Tool", Pllayyrs.Backpack)     if editedparts == nil then         editedparts = {}         parentfix = {}         positionfix = {}     end     deletetool.Name = "Delete"     undotool.Name = "Undo"     undotool.CanBeDropped = true     deletetool.CanBeDropped = true     undotool.RequiresHandle = false     deletetool.RequiresHandle = false     deletetool.Activated:Connect(function()         table.insert(editedparts, mouse.Target)         table.insert(parentfix, mouse.Target.Parent)         table.insert(positionfix, mouse.Target.CFrame)         mouse.Target.Parent = nil     end)     undotool.Activated:Connect(function()         editedparts[#editedparts].Parent = parentfix[#parentfix]         editedparts[#editedparts].CFrame = positionfix[#positionfix]         table.remove(positionfix, #positionfix)         table.remove(editedparts, #editedparts)         table.remove(parentfix, #parentfix)     end) end
  --#endregion
  
   --#endregion
   
   
   --#region Player stuff
  
  
   --#region Walkspeed and Sprint
   getgenv().Speed = 16
   function Walkspeed()
       pcall(function()
       game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
           game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = getgenv().Speed
       end)
       end)
       game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = getgenv().Speed
   end
   
   getgenv().Sprint = true
  
   function beginSprint(input, gameProcessed)
      if not gameProcessed then
          if input.UserInputType == Enum.UserInputType.Keyboard then
              local keycode = input.KeyCode
   
              if keycode == Enum.KeyCode.LeftShift then
                  if not game:GetService("Players").LocalPlayer.PlayerGui.ItemDraggingGUI.CanRotate.Visible then
                      getgenv().Speed = getgenv().SprintSpeed
                      Walkspeed()
                  else
                      getgenv().Speed = 0
                      Walkspeed()
                  end
              end
          end
      end
   end
   
  function endSprint(input, gameProcessed)
      if not gameProcessed then
          if input.UserInputType == Enum.UserInputType.Keyboard then
              local keycode = input.KeyCode
   
              if keycode == Enum.KeyCode.LeftShift then
                  getgenv().Speed = Nspeed
                  Walkspeed()
              end
          end
      end
   end
  --#endregion
  
  
   --#region Fly
  if not getgenv().ButterRan then function BetterFly()     repeat wait() until Player and Player.Character and Player.Character:findFirstChild("Head") and Player.Character:findFirstChild("Humanoid")     repeat wait() until Mouse     local torso = Player.Character.Head     local flying = false     local deb = true     local ctrl = { f = 0, b = 0, l = 0, r = 0 }     local lastctrl = { f = 0, b = 0, l = 0, r = 0 }     local speed = 5000     function Fly()         local bg = Instance.new("BodyGyro", torso)         bg.P = 9e4         bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)         bg.cframe = torso.CFrame         local bv = Instance.new("BodyVelocity", torso)         bv.velocity = Vector3.new(0, 0.1, 0)         bv.maxForce = Vector3.new(9e9, 9e9, 9e9)         repeat             wait()             Player.Character.Humanoid.PlatformStand = true             if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then                 speed = maxspeed             elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then                 speed = 0             end             if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then                 bv.velocity = ((Camera.CoordinateFrame.lookVector * (ctrl.f + ctrl.b)) + ((Camera.CoordinateFrame * CFrame.new(ctrl.l + ctrl.r, (ctrl.f + ctrl.b) * .2, 0).p) - Camera.CoordinateFrame.p)) *                     speed                 lastctrl = { f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r }             elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then                 bv.velocity = ((Camera.CoordinateFrame.lookVector * (lastctrl.f + lastctrl.b)) + ((Camera.CoordinateFrame * CFrame.new(lastctrl.l + lastctrl.r, (lastctrl.f + lastctrl.b) * 0.2, 0).p) - Camera.CoordinateFrame.p)) *                     speed             else                 bv.velocity = Vector3.new(0, 0, 0)             end             bg.cframe = Camera.CoordinateFrame *                 CFrame.Angles(-math.rad((ctrl.f + ctrl.b) * speed / maxspeed), 0, 0)         until not flying         ctrl = { f = 0, b = 0, l = 0, r = 0 }         lastctrl = { f = 0, b = 0, l = 0, r = 0 }         speed = 0         bg:Destroy()         bv:Destroy()         Player.Character.Humanoid.PlatformStand = false     end     Mouse.KeyDown:connect(function(key)         if key:lower() == Flyingkey and FlyingEnabled == true then             if flying then                 flying = false             else                 flying = true                 Fly()             end         elseif key:lower() == "w" then             ctrl.f = 1         elseif key:lower() == "s" then             ctrl.b = -1         elseif key:lower() == "a" then             ctrl.l = -1         elseif key:lower() == "d" then             ctrl.r = 1         end     end)     Mouse.KeyUp:connect(function(key)         if key:lower() == "w" then             ctrl.f = 0         elseif key:lower() == "s" then             ctrl.b = 0         elseif key:lower() == "a" then             ctrl.l = 0         elseif key:lower() == "d" then             ctrl.r = 0         end     end)     Fly() end game.Players.LocalPlayer.CharacterAdded:Connect(BetterFly) BetterFly() end
  
  --#endregion
  
  
   --#region Vehicle fly
   Players = game.Players
   IYMouse = Players.LocalPlayer:GetMouse()
   speaker = Players.LocalPlayer
   QEfly = true
   iyflyspeed = 1
   vehicleflyspeed = 1
   
   function getRoot(char)
       local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or
           char:FindFirstChild('UpperTorso')
       return rootPart
   end
   
   FLYING = false
   QEfly = true
   iyflyspeed = 1
   vehicleflyspeed = 1
   function sFLY(vfly)
       repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
       repeat wait() until IYMouse
       if flyKeyDown or flyKeyUp then
           flyKeyDown:Disconnect()
           flyKeyUp:Disconnect()
       end
   
       local T = getRoot(Players.LocalPlayer.Character)
       local CONTROL = { F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0 }
       local lCONTROL = { F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0 }
       local SPEED = 0
   
       function FLY()
           FLYING = true
           local BG = Instance.new('BodyGyro')
           local BV = Instance.new('BodyVelocity')
           BG.P = 9e4
           BG.Parent = T
           BV.Parent = T
           BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
           BG.cframe = T.CFrame
           BV.velocity = Vector3.new(0, 0, 0)
           BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
           task.spawn(function()
               repeat
                   wait()
                   if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                       Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
                   end
                   if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
                       SPEED = 50
                   elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
                       SPEED = 0
                   end
                   if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
                       BV.velocity = ((game.workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((game.workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - game.workspace.CurrentCamera.CoordinateFrame.p)) *
                           SPEED
                       lCONTROL = { F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R }
                   elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
                       BV.velocity = ((game.workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((game.workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - game.workspace.CurrentCamera.CoordinateFrame.p)) *
                           SPEED
                   else
                       BV.velocity = Vector3.new(0, 0, 0)
                   end
                   BG.cframe = game.workspace.CurrentCamera.CoordinateFrame
               until not FLYING
               CONTROL = { F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0 }
               lCONTROL = { F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0 }
               SPEED = 0
               BG:Destroy()
               BV:Destroy()
               if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                   Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
               end
           end)
       end
   
       flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
           if KEY:lower() == 'w' then
               CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
           elseif KEY:lower() == 's' then
               CONTROL.B = -(vfly and vehicleflyspeed or iyflyspeed)
           elseif KEY:lower() == 'a' then
               CONTROL.L = -(vfly and vehicleflyspeed or iyflyspeed)
           elseif KEY:lower() == 'd' then
               CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
           elseif QEfly and KEY:lower() == 'e' then
               CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed) * 2
           elseif QEfly and KEY:lower() == 'q' then
               CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed) * 2
           end
           pcall(function() game.workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
       end)
       flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
           if KEY:lower() == 'w' then
               CONTROL.F = 0
           elseif KEY:lower() == 's' then
               CONTROL.B = 0
           elseif KEY:lower() == 'a' then
               CONTROL.L = 0
           elseif KEY:lower() == 'd' then
               CONTROL.R = 0
           elseif KEY:lower() == 'e' then
               CONTROL.Q = 0
           elseif KEY:lower() == 'q' then
               CONTROL.E = 0
           end
       end)
       FLY()
   end
   
   function NOFLY()
       FLYING = false
       if flyKeyDown or flyKeyUp then
           flyKeyDown:Disconnect()
           flyKeyUp:Disconnect()
       end
       if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
           Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
       end
       pcall(function() game.workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
   end
  --#endregion
  
  
   --#region Noclip - Infinite jump
  function NoClip(NoClipVal)     if not NoClipVal then         Clipping:Disconnect()         return     end     Clipping = game:GetService("RunService").Stepped:connect(function()         for i, v in next, Player.Character:GetChildren() do             if v:IsA("Part") or v:IsA("BasePart") then                 v.CanCollide = false             end         end     end) end function InfiniteJump(Val)     if not Val then         IJ:Disconnect()         return     end     IJ = game:GetService("UserInputService").JumpRequest:Connect(function()         Player.Character:FindFirstChildOfClass "Humanoid":ChangeState("Jumping")     end) end 
  --#endregion
   
  
   --#region SafeDeath
   function SafeDeath()
      task.spawn(function()
      game.workspace.Gravity, Player.Character.HumanoidRootPart.CFrame = math.huge, CFrame.new(0, -145, 0)
      game:GetService("TweenService"):Create(Player.Character.HumanoidRootPart, TweenInfo.new(0.1), { CFrame = CFrame.new(0, -188, 0) }):Play()
      wait(2)
      game.workspace.Gravity = 196.2
      end)
      
      repeat wait() until Player.Character.Humanoid.Health == 0
  end
  --#endregion
  
  
  --#endregion
  
  
   --#region Vehicle stuff
  
  
    --#region Vehicle Fly
    Players = game.Players   IYMouse = Players.LocalPlayer:GetMouse()   speaker = Players.LocalPlayer   QEfly = true   iyflyspeed = 1   vehicleflyspeed = 1      function getRoot(char)       local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or           char:FindFirstChild('UpperTorso')       return rootPart   end      FLYING = false   QEfly = true   iyflyspeed = 1   vehicleflyspeed = 1   function sFLY(vfly)       repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")       repeat wait() until IYMouse       if flyKeyDown or flyKeyUp then           flyKeyDown:Disconnect()           flyKeyUp:Disconnect()       end          local T = getRoot(Players.LocalPlayer.Character)       local CONTROL = { F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0 }       local lCONTROL = { F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0 }       local SPEED = 0          function FLY()           FLYING = true           local BG = Instance.new('BodyGyro')           local BV = Instance.new('BodyVelocity')           BG.P = 9e4           BG.Parent = T           BV.Parent = T           BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)           BG.cframe = T.CFrame           BV.velocity = Vector3.new(0, 0, 0)           BV.maxForce = Vector3.new(9e9, 9e9, 9e9)           task.spawn(function()               repeat                   wait()                   if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then                       Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true                   end                   if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then                       SPEED = 50                   elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then                       SPEED = 0                   end                   if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then                       BV.velocity = ((game.workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((game.workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - game.workspace.CurrentCamera.CoordinateFrame.p)) *                           SPEED                       lCONTROL = { F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R }                   elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then                       BV.velocity = ((game.workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((game.workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - game.workspace.CurrentCamera.CoordinateFrame.p)) *                           SPEED                   else                       BV.velocity = Vector3.new(0, 0, 0)                   end                   BG.cframe = game.workspace.CurrentCamera.CoordinateFrame               until not FLYING               CONTROL = { F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0 }               lCONTROL = { F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0 }               SPEED = 0               BG:Destroy()               BV:Destroy()               if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then                   Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false               end           end)       end          flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)           if KEY:lower() == 'w' then               CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)           elseif KEY:lower() == 's' then               CONTROL.B = -(vfly and vehicleflyspeed or iyflyspeed)           elseif KEY:lower() == 'a' then               CONTROL.L = -(vfly and vehicleflyspeed or iyflyspeed)           elseif KEY:lower() == 'd' then               CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)           elseif QEfly and KEY:lower() == 'e' then               CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed) * 2           elseif QEfly and KEY:lower() == 'q' then               CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed) * 2           end           pcall(function() game.workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)       end)       flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)           if KEY:lower() == 'w' then               CONTROL.F = 0           elseif KEY:lower() == 's' then               CONTROL.B = 0           elseif KEY:lower() == 'a' then               CONTROL.L = 0           elseif KEY:lower() == 'd' then               CONTROL.R = 0           elseif KEY:lower() == 'e' then               CONTROL.Q = 0           elseif KEY:lower() == 'q' then               CONTROL.E = 0           end       end)       FLY()   end      function NOFLY()       FLYING = false       if flyKeyDown or flyKeyUp then           flyKeyDown:Disconnect()           flyKeyUp:Disconnect()       end       if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then           Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false       end       pcall(function() game.workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)   end
   --#endregion
  
  
  
  --#endregion
  
  
   --#region Wood
   
   --#region OneUnitCutter
   function OneUnitCutter(Value)
  
      if not Value then
          PlankAdded:Disconnect()
          return
      end
  
      PlankAdded = game.Workspace.PlayerModels.ChildAdded:Connect(function(v)
          if v:WaitForChild("TreeClass") and v:WaitForChild("WoodSection") and v:WaitForChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
              SelTree = v
              task.wait()
          end
      end)
  
      for i, v in next, game.Workspace.PlayerModels:GetDescendants() do
          if v:FindFirstChild("WoodSection") and v.WoodSection:FindFirstChild("Selection") then
              v.WoodSection:FindFirstChild("Selection"):Destroy()
              --if not PlrHasTool() then return end
              SelTree = v
              Clicked = SelTree:FindFirstChild("WoodSection")
              game.Players.LocalPlayer.Character:MoveTo(Clicked.Position + Vector3.new(0, 3, -3))
              repeat
                  Clicked = SelTree:FindFirstChild("WoodSection")
                  if UnitCutter == false then break end
  
                  local best = getBestAxeNoRequire()
                  BestAxe = best[1]
                  BestCooldown = best[2]
                  BestValue = best[3]
  
                  if BestAxe.ToolName.Value == "FireAxe" and SelTree:FindFirstChild("TreeClass").Value == "Volcano" then BestValue = 6.35 BestCooldown = 0.35 elseif BestAxe.ToolName.Value == "EndTimesAxe" and SelTree:FindFirstChild("TreeClass").Value == "LoneCave" then        BestValue = 10000000        BestCooldown = 0.3    elseif BestAxe.ToolName.Value == "AxeSwamp" and SelTree:FindFirstChild("TreeClass").Value == "GreenSwampy" then        BestValue = 7        BestCooldown = 0.46    elseif BestAxe.ToolName.Value == "AxeTwitter" and SelTree:FindFirstChild("TreeClass").Value == "Volcano" then        BestValue = 2.5        BestCooldown = 0.4    elseif BestAxe.ToolName.Value == "AxeTwitter" and SelTree:FindFirstChild("TreeClass").Value == "CaveCrawler " then        BestValue = 3.9        BestCooldown = 0.4    elseif BestAxe.ToolName.Value == "CaveAxe" and SelTree:FindFirstChild("TreeClass").Value == "CaveCrawler" then        BestValue = 7.2        BestCooldown = 0.22    elseif BestAxe.ToolName.Value == "GingerbreadAxe" and SelTree:FindFirstChild("TreeClass").Value == "Walnut" then BestValue = 7.2 BestCooldown = 0.22 elseif BestAxe.ToolName.Value == "IceAxe" and SelTree:FindFirstChild("TreeClass").Value == "Frost" then BestValue = 6 BestCooldown = 0.31 end
  
                  local args = {
                      [1] = SelTree.CutEvent,
                      [2] = {
                          ["tool"] = BestAxe,
                          ["faceVector"] = Vector3.new(1, 0, 0),
                          ["height"] = 1,
                          ["sectionId"] = 1,
                          ["hitPoints"] = BestValue,
                          ["cooldown"] = BestCooldown,
                          ["cuttingClass"] = "Axe"
                      }
                  }
  
                  game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(unpack(args))
  
                  game.Players.LocalPlayer.Character:MoveTo(Clicked.Position + Vector3.new(0, 3, -3))
  
                  task.wait()
              until SelTree.WoodSection.Size.X <= 1.88 and SelTree.WoodSection.Size.Y <= 1.88 and SelTree.WoodSection.Size.Z <= 1.88
          end
      end
  end
  --#endregion
  
  
   --#region Sell Selected
      function SellSelected()
          getgenv().StopSellSelected = false
          for i,v in pairs(game.Workspace.PlayerModels:GetDescendants()) do
              if v.Name == "Selection" and v.Parent.Name == "WoodSection" then
                  OldSize = v.Parent.Size
                  v.Parent.Size = Vector3.new(1,1,1)
  
                  OldColor = v.Parent.Color
  
                  Player.Character.HumanoidRootPart.CFrame = CFrame.new(v.Parent.CFrame.p) * CFrame.new(5, 0, 0)
  
                  wait(GetPing())
   
                  for i = 1, 50 do
                      v.Parent.Color = Color3.fromRGB(0, 255, 0)
                      game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.Parent.Parent)
                      task.wait()
                  end
      
                  v.Parent.Color = OldColor
  
                  if getgenv().StopSellSelected then DeselectAll() library:Notify("Butter!","Stoped",1.5) v.Parent.Size = OldSize break end
      
                  if isnetworkowner(v.Parent) then
                      --Sell CFrame
                      v.Parent.CFrame = CFrame.new(315.323914, -0.400000274, 86.8370438, -0.999951959, -1.78338855e-08, -0.00980282854, -1.78938677e-08, 1, 6.031176e-09, 0.00980282854, 6.20629681e-09, -0.999951959) +  Vector3.new(math.rad(90), 0, 0) 
                  else
                      game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.Parent.Parent)
                      v.Parent.CFrame = CFrame.new(315.323914, -0.400000274, 86.8370438, -0.999951959, -1.78338855e-08, -0.00980282854, -1.78938677e-08, 1, 6.031176e-09, 0.00980282854, 6.20629681e-09, -0.999951959) +  Vector3.new(math.rad(90), 0, 0)
                  end
  
              end
          end
      end
  --#endregion
  
  
   --#region Get Cut Trees
  function GetCutTrees(CustomTree,CustomPos)
      OldPos = Player.Character.HumanoidRootPart.CFrame
      for i,v in pairs(game.workspace.LogModels:GetDescendants()) do
      if v.Name == "Owner" and tostring(v.Value) == Player.Name then
  
          if CustomPos then
          OldPos = CustomPos
          end 
  
          if CustomTree then 
              if not tostring(v.Parent:FindFirstChild("TreeClass").Value) == CustomTree then 
                  continue
              end
          end
         
          Player.Character.HumanoidRootPart.CFrame = CFrame.new(v.Parent:FindFirstChild("WoodSection").CFrame.p) * CFrame.new(5, 0, 0)
  
          wait(GetPing())
         
          OldColor = v.Parent:FindFirstChild("WoodSection").Color
         
          for i = 1, 50 do
              v.Parent:FindFirstChild("WoodSection").Color = Color3.fromRGB(0, 255, 0)
              game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.Parent)
              task.wait()
          end
         
          v.Parent:FindFirstChild("WoodSection").Color = OldColor
         
         
          v.Parent:FindFirstChild("WoodSection").CFrame = OldPos
  
          Player.Character.HumanoidRootPart.CFrame = OldPos
          end
      end
  end
  --#endregion
  
  
   --#region Sell Tree
   function SellTree()
      library:Notify("Butter!","Click a tree!",2)
      local TreeToSell = nil
  
      OldPosition = Player.Character.HumanoidRootPart.CFrame
  
      TreeSellConnect = Mouse.Button1Down:Connect(function()
  
  
          if Mouse.Target.Name == "WoodSection" then
              TreeToSell = Mouse.Target.Parent
          end
  
  
          for i = 1,50 do
              task.wait()
              game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(TreeToSell)
          end
  
          Player.Character.HumanoidRootPart.CFrame = CFrame.new(TreeToSell:FindFirstChild("WoodSection").CFrame.p) * CFrame.new(5, 0, 0)
  
          task.wait(0.5)
          TreeToSell:FindFirstChild("WoodSection").CFrame = CFrame.new(315.323914, -0.400000274, 86.8370438, -0.999951959, -1.78338855e-08, -0.00980282854, -1.78938677e-08, 1, 6.031176e-09, 0.00980282854, 6.20629681e-09, -0.999951959) +  Vector3.new(math.rad(90), 0, 0)
          task.wait(0.5)
  
          for i, v in pairs(TreeToSell:GetDescendants()) do
  
              if v.Name == "Tree Weld" then
                  v:Destroy()
              end
  
          end
  
  
  
          for i, v in pairs(TreeToSell:GetDescendants()) do
  
              if v.Name == "WoodSection" then
  
                  if TreeToSell:FindFirstChild("TreeClass").Value == "CaveCrawler" then v.Size = v.Size / 1.5 end
  
                  Player.Character.HumanoidRootPart.CFrame = CFrame.new(v.CFrame.p) * CFrame.new(5, 0, 0)
  
                  for i = 1,50 do
                      task.wait()
                      game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v.Parent)
                  end
  
                  v.CFrame = CFrame.new(315.323914, -0.400000274, 86.8370438, -0.999951959, -1.78338855e-08, -0.00980282854, -1.78938677e-08, 1, 6.031176e-09, 0.00980282854, 6.20629681e-09, -0.999951959) +  Vector3.new(math.rad(90), 0, 0) 
              
              end
  
          end
      
          TreeSellConnect:Disconnect()
          if not TreeToSell then library:Notify("Butter!","That's not a tree!",2) end
      end)
      Player.Character.HumanoidRootPart.CFrame = OldPosition
   end
  --#endregion
  
   --#endregion
   
  
   --#region Dupe
   function AxeDupe(Slot,WaitTime,Amount)
      if not game:GetService("ReplicatedStorage").LoadSaveRequests.ClientMayLoad:InvokeServer(Player) then library:Notify("Butter","Can't reload try again later",3) return end
  
      for i = 1,Amount do
  
          if WaitTime <= 0 then SafeDeath() wait(print(math.abs(WaitTime))) end
  
          task.spawn(function()
              game:GetService("ReplicatedStorage").LoadSaveRequests.RequestLoad:InvokeServer(Slot, game.Players.LocalPlayer)
              wait(WaitTime)
          end)
  
          if WaitTime >= 0 then SafeDeath() end
  
  
          
          if Amount > 1 then library:Notify("Butter!","Duping again when possible make sure to load back in your base",3) repeat wait(30) until game:GetService("ReplicatedStorage").LoadSaveRequests.ClientMayLoad:InvokeServer(Player) else library:Notify("Butter!","Done! load your base anywhere you want!",3) end
      end
  
   end
  
   --#endregion
  
  
   --#region other Functions
  
  --#region Getblueprints
  function GetBlueprints()
      BluePrints = {}
      for i, v in next, game:GetService("ReplicatedStorage").ClientItemInfo:GetChildren() do
          if v:FindFirstChild "Type" and v.Type.Value == "Structure" or v.Type.Value == "Furniture" then
              if v:FindFirstChild "WoodCost" then
                  if not Player.PlayerBlueprints.Blueprints:FindFirstChild(v.Name) then
                      table.insert(BluePrints, v.Name)
                  end
              end
          end
      end
      return BluePrints
  end
  --#endregion
  
  --#endregion
  
  
   --#endregion



local UI = library:Create("18568104635") -- Roblox ID for the image you uploaded
local Tab
local Section

 --#region Player
 Tab = UI:CreateTab("Player","6022668898") ----------------------------------------------------------------------------------------------------------------------
 Section = Tab:CreateSection("Movement Sliders") ----------------------------------------------------------------------------------------------------------------------


 Section:Slider("Walk speed",16,16,300,false,function(Value)
    if getgenv().Sprint == true then
        Nspeed = Value
        getgenv().Speed = Nspeed
        Walkspeed()
    else
        getgenv().SprintSpeed = getgenv().Speed
        Nspeed = Value
        getgenv().Speed = Nspeed
        Walkspeed()
    end
 end)

 Section:Slider("Jump power",50,50,300,false,function(Value)
    Player.Character.Humanoid.JumpPower = Value
 end)


 Section:Slider("Sprint speed",65,16,300,false,function(Value)
        getgenv().SprintSpeed = Value
 end)

 if not getgenv().ButterRan then UserInputService.InputBegan:Connect(beginSprint) UserInputService.InputEnded:Connect(endSprint) end


 Section:Slider("Fly",ConfigData.FlySpeed,50,300,false,function(Value)
    ConfigData.FlySpeed = Value
    maxspeed = Value
    SaveSettings()
 end)


 Section:KeyBind("Fly keybind",ConfigData.FlyKey,function(Value)
    ConfigData.FlyKey = Value
    Flyingkey = string.lower(Value)
    SaveSettings()
 end)


 Section = Tab:CreateSection("Movement Toggles") ----------------------------------------------------------------------------------------------------------------------

 Section:Toggle("Fly",ConfigData.Fly,function(Value)
    ConfigData.Fly = Value
    FlyingEnabled = Value
    SaveSettings()
 end)


 Section:Toggle("Noclip",false,function(Value)
    NoClip(Value)
 end)


 Section:Toggle("InfiniteJump",false,function(Value)
    InfiniteJump(Value)
 end)

 Section = Tab:CreateSection("Misc")

 Section:Toggle("Hard Dragger",ConfigData.HardDragger,function(Value)
    ConfigData.HardDragger = Value
    CustomDragger = Value
    SaveSettings()
 end)

 Dragger()
--#endregion
